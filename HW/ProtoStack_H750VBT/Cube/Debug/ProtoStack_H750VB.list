
ProtoStack_H750VB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f78  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08005228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000324  24000010  08005238  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000334  08005238  00020334  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000159bf  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002589  00000000  00000000  000359fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a30  00000000  00000000  00037f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000970  00000000  00000000  000389b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035f2c  00000000  00000000  00039328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c7b9  00000000  00000000  0006f254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00157554  00000000  00000000  0007ba0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d2f61  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028d0  00000000  00000000  001d2fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080051f8 	.word	0x080051f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080051f8 	.word	0x080051f8

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fd0e 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f80a 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f9e0 	bl	80006a8 <MX_GPIO_Init>
  MX_FMC_Init();
 80002e8:	f000 f92c 	bl	8000544 <MX_FMC_Init>
  MX_SAI1_Init();
 80002ec:	f000 f880 	bl	80003f0 <MX_SAI1_Init>
  MX_SAI2_Init();
 80002f0:	f000 f8d0 	bl	8000494 <MX_SAI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <main+0x1c>
	...

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b09c      	sub	sp, #112	; 0x70
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000302:	224c      	movs	r2, #76	; 0x4c
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f004 ff6e 	bl	80051e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2220      	movs	r2, #32
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f004 ff68 	bl	80051e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000318:	2002      	movs	r0, #2
 800031a:	f001 f821 	bl	8001360 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800031e:	2300      	movs	r3, #0
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	4b31      	ldr	r3, [pc, #196]	; (80003e8 <SystemClock_Config+0xf0>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a30      	ldr	r2, [pc, #192]	; (80003e8 <SystemClock_Config+0xf0>)
 8000328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800032c:	6193      	str	r3, [r2, #24]
 800032e:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemClock_Config+0xf0>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <SystemClock_Config+0xf4>)
 800033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033c:	4a2b      	ldr	r2, [pc, #172]	; (80003ec <SystemClock_Config+0xf4>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000344:	4b29      	ldr	r3, [pc, #164]	; (80003ec <SystemClock_Config+0xf4>)
 8000346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	603b      	str	r3, [r7, #0]
 800034e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000350:	bf00      	nop
 8000352:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <SystemClock_Config+0xf0>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800035a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800035e:	d1f8      	bne.n	8000352 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000360:	2301      	movs	r3, #1
 8000362:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036e:	2302      	movs	r3, #2
 8000370:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000372:	2304      	movs	r3, #4
 8000374:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000376:	23a0      	movs	r3, #160	; 0xa0
 8000378:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800037a:	2302      	movs	r3, #2
 800037c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800037e:	2302      	movs	r3, #2
 8000380:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000382:	2302      	movs	r3, #2
 8000384:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000386:	2308      	movs	r3, #8
 8000388:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800038a:	2300      	movs	r3, #0
 800038c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000396:	4618      	mov	r0, r3
 8000398:	f001 f81c 	bl	80013d4 <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003a2:	f000 f9f1 	bl	8000788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	233f      	movs	r3, #63	; 0x3f
 80003a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2303      	movs	r3, #3
 80003ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003b2:	2308      	movs	r3, #8
 80003b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003b6:	2340      	movs	r3, #64	; 0x40
 80003b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003ba:	2340      	movs	r3, #64	; 0x40
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003c4:	2340      	movs	r3, #64	; 0x40
 80003c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2104      	movs	r1, #4
 80003cc:	4618      	mov	r0, r3
 80003ce:	f001 fc2d 	bl	8001c2c <HAL_RCC_ClockConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80003d8:	f000 f9d6 	bl	8000788 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80003dc:	f001 fddc 	bl	8001f98 <HAL_RCC_EnableCSS>
}
 80003e0:	bf00      	nop
 80003e2:	3770      	adds	r7, #112	; 0x70
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	58024800 	.word	0x58024800
 80003ec:	58000400 	.word	0x58000400

080003f0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <MX_SAI1_Init+0x94>)
 80003f6:	4a24      	ldr	r2, [pc, #144]	; (8000488 <MX_SAI1_Init+0x98>)
 80003f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 80003fa:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MX_SAI1_Init+0x94>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 8000400:	4b20      	ldr	r3, [pc, #128]	; (8000484 <MX_SAI1_Init+0x94>)
 8000402:	2201      	movs	r2, #1
 8000404:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <MX_SAI1_Init+0x94>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800040c:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <MX_SAI1_Init+0x94>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000412:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <MX_SAI1_Init+0x94>)
 8000414:	2200      	movs	r2, #0
 8000416:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000418:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <MX_SAI1_Init+0x94>)
 800041a:	2200      	movs	r2, #0
 800041c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <MX_SAI1_Init+0x94>)
 8000420:	2200      	movs	r2, #0
 8000422:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000424:	2302      	movs	r3, #2
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	4816      	ldr	r0, [pc, #88]	; (8000484 <MX_SAI1_Init+0x94>)
 800042c:	f004 f910 	bl	8004650 <HAL_SAI_InitProtocol>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_SAI1_Init+0x4a>
  {
    Error_Handler();
 8000436:	f000 f9a7 	bl	8000788 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_SAI1_Init+0x9c>)
 800043c:	4a14      	ldr	r2, [pc, #80]	; (8000490 <MX_SAI1_Init+0xa0>)
 800043e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_SAI1_Init+0x9c>)
 8000442:	2203      	movs	r2, #3
 8000444:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_SAI1_Init+0x9c>)
 8000448:	2201      	movs	r2, #1
 800044a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_SAI1_Init+0x9c>)
 800044e:	2200      	movs	r2, #0
 8000450:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_SAI1_Init+0x9c>)
 8000454:	2200      	movs	r2, #0
 8000456:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_SAI1_Init+0x9c>)
 800045a:	2200      	movs	r2, #0
 800045c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_SAI1_Init+0x9c>)
 8000460:	2200      	movs	r2, #0
 8000462:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_SAI1_Init+0x9c>)
 8000466:	2200      	movs	r2, #0
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800046a:	2302      	movs	r3, #2
 800046c:	2200      	movs	r2, #0
 800046e:	2100      	movs	r1, #0
 8000470:	4806      	ldr	r0, [pc, #24]	; (800048c <MX_SAI1_Init+0x9c>)
 8000472:	f004 f8ed 	bl	8004650 <HAL_SAI_InitProtocol>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_SAI1_Init+0x90>
  {
    Error_Handler();
 800047c:	f000 f984 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	24000298 	.word	0x24000298
 8000488:	40015804 	.word	0x40015804
 800048c:	240001b4 	.word	0x240001b4
 8000490:	40015824 	.word	0x40015824

08000494 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000498:	4b26      	ldr	r3, [pc, #152]	; (8000534 <MX_SAI2_Init+0xa0>)
 800049a:	4a27      	ldr	r2, [pc, #156]	; (8000538 <MX_SAI2_Init+0xa4>)
 800049c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODESLAVE_RX;
 800049e:	4b25      	ldr	r3, [pc, #148]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004a0:	2203      	movs	r2, #3
 80004a2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80004a4:	4b23      	ldr	r3, [pc, #140]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80004aa:	4b22      	ldr	r3, [pc, #136]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80004b0:	4b20      	ldr	r3, [pc, #128]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80004b6:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80004bc:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004be:	2200      	movs	r2, #0
 80004c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80004c8:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80004ce:	2302      	movs	r3, #2
 80004d0:	2200      	movs	r2, #0
 80004d2:	2100      	movs	r1, #0
 80004d4:	4817      	ldr	r0, [pc, #92]	; (8000534 <MX_SAI2_Init+0xa0>)
 80004d6:	f004 f8bb 	bl	8004650 <HAL_SAI_InitProtocol>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_SAI2_Init+0x50>
  {
    Error_Handler();
 80004e0:	f000 f952 	bl	8000788 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_SAI2_Init+0xa8>)
 80004e6:	4a16      	ldr	r2, [pc, #88]	; (8000540 <MX_SAI2_Init+0xac>)
 80004e8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_SAI2_Init+0xa8>)
 80004ec:	2203      	movs	r2, #3
 80004ee:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <MX_SAI2_Init+0xa8>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_SAI2_Init+0xa8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <MX_SAI2_Init+0xa8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_SAI2_Init+0xa8>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_SAI2_Init+0xa8>)
 800050a:	2200      	movs	r2, #0
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_SAI2_Init+0xa8>)
 8000510:	2200      	movs	r2, #0
 8000512:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_SAI2_Init+0xa8>)
 8000516:	2200      	movs	r2, #0
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800051a:	2302      	movs	r3, #2
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <MX_SAI2_Init+0xa8>)
 8000522:	f004 f895 	bl	8004650 <HAL_SAI_InitProtocol>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_SAI2_Init+0x9c>
  {
    Error_Handler();
 800052c:	f000 f92c 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	240000d0 	.word	0x240000d0
 8000538:	40015c04 	.word	0x40015c04
 800053c:	24000038 	.word	0x24000038
 8000540:	40015c24 	.word	0x40015c24

08000544 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	615a      	str	r2, [r3, #20]
 800055a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800055c:	4b4e      	ldr	r3, [pc, #312]	; (8000698 <MX_FMC_Init+0x154>)
 800055e:	4a4f      	ldr	r2, [pc, #316]	; (800069c <MX_FMC_Init+0x158>)
 8000560:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000562:	4b4d      	ldr	r3, [pc, #308]	; (8000698 <MX_FMC_Init+0x154>)
 8000564:	4a4e      	ldr	r2, [pc, #312]	; (80006a0 <MX_FMC_Init+0x15c>)
 8000566:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000568:	4b4b      	ldr	r3, [pc, #300]	; (8000698 <MX_FMC_Init+0x154>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800056e:	4b4a      	ldr	r3, [pc, #296]	; (8000698 <MX_FMC_Init+0x154>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000574:	4b48      	ldr	r3, [pc, #288]	; (8000698 <MX_FMC_Init+0x154>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800057a:	4b47      	ldr	r3, [pc, #284]	; (8000698 <MX_FMC_Init+0x154>)
 800057c:	2210      	movs	r2, #16
 800057e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000580:	4b45      	ldr	r3, [pc, #276]	; (8000698 <MX_FMC_Init+0x154>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000586:	4b44      	ldr	r3, [pc, #272]	; (8000698 <MX_FMC_Init+0x154>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800058c:	4b42      	ldr	r3, [pc, #264]	; (8000698 <MX_FMC_Init+0x154>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000592:	4b41      	ldr	r3, [pc, #260]	; (8000698 <MX_FMC_Init+0x154>)
 8000594:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000598:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800059a:	4b3f      	ldr	r3, [pc, #252]	; (8000698 <MX_FMC_Init+0x154>)
 800059c:	2200      	movs	r2, #0
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80005a0:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <MX_FMC_Init+0x154>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80005a6:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <MX_FMC_Init+0x154>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <MX_FMC_Init+0x154>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <MX_FMC_Init+0x154>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80005b8:	4b37      	ldr	r3, [pc, #220]	; (8000698 <MX_FMC_Init+0x154>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80005be:	4b36      	ldr	r3, [pc, #216]	; (8000698 <MX_FMC_Init+0x154>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80005c4:	230f      	movs	r3, #15
 80005c6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80005c8:	230f      	movs	r3, #15
 80005ca:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80005cc:	23ff      	movs	r3, #255	; 0xff
 80005ce:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80005d0:	230f      	movs	r3, #15
 80005d2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80005d4:	2310      	movs	r3, #16
 80005d6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80005d8:	2311      	movs	r3, #17
 80005da:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	4619      	mov	r1, r3
 80005e6:	482c      	ldr	r0, [pc, #176]	; (8000698 <MX_FMC_Init+0x154>)
 80005e8:	f004 fc72 	bl	8004ed0 <HAL_SRAM_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 80005f2:	f000 f8c9 	bl	8000788 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_FMC_Init+0x160>)
 80005f8:	4a28      	ldr	r2, [pc, #160]	; (800069c <MX_FMC_Init+0x158>)
 80005fa:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_FMC_Init+0x160>)
 80005fe:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <MX_FMC_Init+0x15c>)
 8000600:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK2;
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_FMC_Init+0x160>)
 8000604:	2202      	movs	r2, #2
 8000606:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_FMC_Init+0x160>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_FMC_Init+0x160>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_FMC_Init+0x160>)
 8000616:	2210      	movs	r2, #16
 8000618:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_FMC_Init+0x160>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_FMC_Init+0x160>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_FMC_Init+0x160>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_FMC_Init+0x160>)
 800062e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_FMC_Init+0x160>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_FMC_Init+0x160>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_FMC_Init+0x160>)
 8000642:	2200      	movs	r2, #0
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_FMC_Init+0x160>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_FMC_Init+0x160>)
 800064e:	2200      	movs	r2, #0
 8000650:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_FMC_Init+0x160>)
 8000654:	2200      	movs	r2, #0
 8000656:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_FMC_Init+0x160>)
 800065a:	2200      	movs	r2, #0
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800065e:	230f      	movs	r3, #15
 8000660:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000662:	230f      	movs	r3, #15
 8000664:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000666:	23ff      	movs	r3, #255	; 0xff
 8000668:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800066a:	230f      	movs	r3, #15
 800066c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800066e:	2310      	movs	r3, #16
 8000670:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000672:	2311      	movs	r3, #17
 8000674:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <MX_FMC_Init+0x160>)
 8000682:	f004 fc25 	bl	8004ed0 <HAL_SRAM_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_FMC_Init+0x14c>
  {
    Error_Handler( );
 800068c:	f000 f87c 	bl	8000788 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	24000168 	.word	0x24000168
 800069c:	52004000 	.word	0x52004000
 80006a0:	52004104 	.word	0x52004104
 80006a4:	2400024c 	.word	0x2400024c

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006be:	4b30      	ldr	r3, [pc, #192]	; (8000780 <MX_GPIO_Init+0xd8>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c4:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <MX_GPIO_Init+0xd8>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <MX_GPIO_Init+0xd8>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	f003 0310 	and.w	r3, r3, #16
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_GPIO_Init+0xd8>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	4a27      	ldr	r2, [pc, #156]	; (8000780 <MX_GPIO_Init+0xd8>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_GPIO_Init+0xd8>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_GPIO_Init+0xd8>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <MX_GPIO_Init+0xd8>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_GPIO_Init+0xd8>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_GPIO_Init+0xd8>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a18      	ldr	r2, [pc, #96]	; (8000780 <MX_GPIO_Init+0xd8>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_GPIO_Init+0xd8>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_GPIO_Init+0xd8>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a10      	ldr	r2, [pc, #64]	; (8000780 <MX_GPIO_Init+0xd8>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_GPIO_Init+0xd8>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000766:	2305      	movs	r3, #5
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xdc>)
 8000772:	f000 fc45 	bl	8001000 <HAL_GPIO_Init>

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	58024400 	.word	0x58024400
 8000784:	58020800 	.word	0x58020800

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	e7fe      	b.n	8000790 <Error_Handler+0x8>
	...

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_MspInit+0x30>)
 800079c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_MspInit+0x30>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x30>)
 80007ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58024400 	.word	0x58024400

080007c8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b0b6      	sub	sp, #216	; 0xd8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80007ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80007de:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <HAL_FMC_MspInit+0xfc>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d16a      	bne.n	80008bc <HAL_FMC_MspInit+0xf4>
    return;
  }
  FMC_Initialized = 1;
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <HAL_FMC_MspInit+0xfc>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	22bc      	movs	r2, #188	; 0xbc
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 fcf7 	bl	80051e8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80007fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000800:	2300      	movs	r3, #0
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fd9b 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8000814:	f7ff ffb8 	bl	8000788 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <HAL_FMC_MspInit+0x100>)
 800081a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800081e:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <HAL_FMC_MspInit+0x100>)
 8000820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000824:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <HAL_FMC_MspInit+0x100>)
 800082a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800082e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000836:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800083a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000850:	230c      	movs	r3, #12
 8000852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000856:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800085a:	4619      	mov	r1, r3
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <HAL_FMC_MspInit+0x104>)
 800085e:	f000 fbcf 	bl	8001000 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000862:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800087c:	230c      	movs	r3, #12
 800087e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000882:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000886:	4619      	mov	r1, r3
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <HAL_FMC_MspInit+0x108>)
 800088a:	f000 fbb9 	bl	8001000 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800088e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80008a8:	2309      	movs	r3, #9
 80008aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <HAL_FMC_MspInit+0x10c>)
 80008b6:	f000 fba3 	bl	8001000 <HAL_GPIO_Init>
 80008ba:	e000      	b.n	80008be <HAL_FMC_MspInit+0xf6>
    return;
 80008bc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80008be:	37d8      	adds	r7, #216	; 0xd8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2400002c 	.word	0x2400002c
 80008c8:	58024400 	.word	0x58024400
 80008cc:	58021000 	.word	0x58021000
 80008d0:	58020c00 	.word	0x58020c00
 80008d4:	58020800 	.word	0x58020800

080008d8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80008e0:	f7ff ff72 	bl	80007c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ba      	sub	sp, #232	; 0xe8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	22bc      	movs	r2, #188	; 0xbc
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 fc73 	bl	80051e8 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a83      	ldr	r2, [pc, #524]	; (8000b14 <HAL_SAI_MspInit+0x228>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d13b      	bne.n	8000984 <HAL_SAI_MspInit+0x98>
    {
    /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PIN;
 8000912:	2303      	movs	r3, #3
 8000914:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fd12 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8000926:	f7ff ff2f 	bl	8000788 <Error_Handler>
    }

    if (SAI1_client == 0)
 800092a:	4b7b      	ldr	r3, [pc, #492]	; (8000b18 <HAL_SAI_MspInit+0x22c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10e      	bne.n	8000950 <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000932:	4b7a      	ldr	r3, [pc, #488]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 8000934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000938:	4a78      	ldr	r2, [pc, #480]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 800093a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000942:	4b76      	ldr	r3, [pc, #472]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 8000944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]
    }
    SAI1_client ++;
 8000950:	4b71      	ldr	r3, [pc, #452]	; (8000b18 <HAL_SAI_MspInit+0x22c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	4a70      	ldr	r2, [pc, #448]	; (8000b18 <HAL_SAI_MspInit+0x22c>)
 8000958:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000972:	2306      	movs	r3, #6
 8000974:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800097c:	4619      	mov	r1, r3
 800097e:	4868      	ldr	r0, [pc, #416]	; (8000b20 <HAL_SAI_MspInit+0x234>)
 8000980:	f000 fb3e 	bl	8001000 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a66      	ldr	r2, [pc, #408]	; (8000b24 <HAL_SAI_MspInit+0x238>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d13b      	bne.n	8000a06 <HAL_SAI_MspInit+0x11a>
    {
      /* Peripheral clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800098e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000992:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PIN;
 8000994:	2303      	movs	r3, #3
 8000996:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fcd1 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_SAI_MspInit+0xc0>
    {
      Error_Handler();
 80009a8:	f7ff feee 	bl	8000788 <Error_Handler>
    }

      if (SAI1_client == 0)
 80009ac:	4b5a      	ldr	r3, [pc, #360]	; (8000b18 <HAL_SAI_MspInit+0x22c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10e      	bne.n	80009d2 <HAL_SAI_MspInit+0xe6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80009b4:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 80009b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009ba:	4a58      	ldr	r2, [pc, #352]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 80009bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009c4:	4b55      	ldr	r3, [pc, #340]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 80009c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
      }
    SAI1_client ++;
 80009d2:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <HAL_SAI_MspInit+0x22c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <HAL_SAI_MspInit+0x22c>)
 80009da:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009dc:	2308      	movs	r3, #8
 80009de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80009f4:	2306      	movs	r3, #6
 80009f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4849      	ldr	r0, [pc, #292]	; (8000b28 <HAL_SAI_MspInit+0x23c>)
 8000a02:	f000 fafd 	bl	8001000 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a48      	ldr	r2, [pc, #288]	; (8000b2c <HAL_SAI_MspInit+0x240>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d13c      	bne.n	8000a8a <HAL_SAI_MspInit+0x19e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PIN;
 8000a16:	23c0      	movs	r3, #192	; 0xc0
 8000a18:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 fc90 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_SAI_MspInit+0x142>
    {
      Error_Handler();
 8000a2a:	f7ff fead 	bl	8000788 <Error_Handler>
    }

    if (SAI2_client == 0)
 8000a2e:	4b40      	ldr	r3, [pc, #256]	; (8000b30 <HAL_SAI_MspInit+0x244>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10e      	bne.n	8000a54 <HAL_SAI_MspInit+0x168>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000a36:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 8000a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a3c:	4a37      	ldr	r2, [pc, #220]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 8000a3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a46:	4b35      	ldr	r3, [pc, #212]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 8000a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8000a54:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <HAL_SAI_MspInit+0x244>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <HAL_SAI_MspInit+0x244>)
 8000a5c:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    PD12     ------> SAI2_FS_A
    PD13     ------> SAI2_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000a5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a78:	230a      	movs	r3, #10
 8000a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a82:	4619      	mov	r1, r3
 8000a84:	482b      	ldr	r0, [pc, #172]	; (8000b34 <HAL_SAI_MspInit+0x248>)
 8000a86:	f000 fabb 	bl	8001000 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <HAL_SAI_MspInit+0x24c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d13b      	bne.n	8000b0c <HAL_SAI_MspInit+0x220>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PIN;
 8000a9a:	23c0      	movs	r3, #192	; 0xc0
 8000a9c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fc4e 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_SAI_MspInit+0x1c6>
    {
      Error_Handler();
 8000aae:	f7ff fe6b 	bl	8000788 <Error_Handler>
    }

      if (SAI2_client == 0)
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_SAI_MspInit+0x244>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10e      	bne.n	8000ad8 <HAL_SAI_MspInit+0x1ec>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 8000abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 8000ac2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_SAI_MspInit+0x230>)
 8000acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_SAI_MspInit+0x244>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <HAL_SAI_MspInit+0x244>)
 8000ae0:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PA0     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000afa:	230a      	movs	r3, #10
 8000afc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b04:	4619      	mov	r1, r3
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <HAL_SAI_MspInit+0x250>)
 8000b08:	f000 fa7a 	bl	8001000 <HAL_GPIO_Init>

    }
}
 8000b0c:	bf00      	nop
 8000b0e:	37e8      	adds	r7, #232	; 0xe8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40015804 	.word	0x40015804
 8000b18:	24000030 	.word	0x24000030
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58020800 	.word	0x58020800
 8000b24:	40015824 	.word	0x40015824
 8000b28:	58021000 	.word	0x58021000
 8000b2c:	40015c04 	.word	0x40015c04
 8000b30:	24000034 	.word	0x24000034
 8000b34:	58020c00 	.word	0x58020c00
 8000b38:	40015c24 	.word	0x40015c24
 8000b3c:	58020000 	.word	0x58020000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000b44:	f001 fbe2 	bl	800230c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x8>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f926 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <SystemInit+0xe4>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a36      	ldr	r2, [pc, #216]	; (8000c7c <SystemInit+0xe4>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <SystemInit+0xe8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	d807      	bhi.n	8000bc8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <SystemInit+0xe8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f023 030f 	bic.w	r3, r3, #15
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <SystemInit+0xe8>)
 8000bc2:	f043 0307 	orr.w	r3, r3, #7
 8000bc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <SystemInit+0xec>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a2d      	ldr	r2, [pc, #180]	; (8000c84 <SystemInit+0xec>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <SystemInit+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <SystemInit+0xec>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4929      	ldr	r1, [pc, #164]	; (8000c84 <SystemInit+0xec>)
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <SystemInit+0xf0>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <SystemInit+0xe8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d007      	beq.n	8000c02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <SystemInit+0xe8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f023 030f 	bic.w	r3, r3, #15
 8000bfa:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <SystemInit+0xe8>)
 8000bfc:	f043 0307 	orr.w	r3, r3, #7
 8000c00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <SystemInit+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <SystemInit+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <SystemInit+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <SystemInit+0xec>)
 8000c16:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <SystemInit+0xf4>)
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <SystemInit+0xec>)
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <SystemInit+0xf8>)
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <SystemInit+0xec>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <SystemInit+0xfc>)
 8000c24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <SystemInit+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <SystemInit+0xec>)
 8000c2e:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <SystemInit+0xfc>)
 8000c30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <SystemInit+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <SystemInit+0xec>)
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <SystemInit+0xfc>)
 8000c3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <SystemInit+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <SystemInit+0xec>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <SystemInit+0xec>)
 8000c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <SystemInit+0xec>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <SystemInit+0x100>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <SystemInit+0x104>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c62:	d202      	bcs.n	8000c6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <SystemInit+0x108>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <SystemInit+0x10c>)
 8000c6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c70:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	52002000 	.word	0x52002000
 8000c84:	58024400 	.word	0x58024400
 8000c88:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c8c:	02020200 	.word	0x02020200
 8000c90:	01ff0000 	.word	0x01ff0000
 8000c94:	01010280 	.word	0x01010280
 8000c98:	5c001000 	.word	0x5c001000
 8000c9c:	ffff0000 	.word	0xffff0000
 8000ca0:	51008108 	.word	0x51008108
 8000ca4:	52004000 	.word	0x52004000

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cac:	f7ff ff74 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	; (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f004 fa63 	bl	80051a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fafd 	bl	80002d8 <main>
  bx  lr
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ce4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ce8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cec:	08005228 	.word	0x08005228
  ldr r2, =_sbss
 8000cf0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cf4:	24000334 	.word	0x24000334

08000cf8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC3_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 f94a 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d08:	f001 f956 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_Init+0x68>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	4913      	ldr	r1, [pc, #76]	; (8000d68 <HAL_Init+0x6c>)
 8000d1a:	5ccb      	ldrb	r3, [r1, r3]
 8000d1c:	f003 031f 	and.w	r3, r3, #31
 8000d20:	fa22 f303 	lsr.w	r3, r2, r3
 8000d24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_Init+0x68>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <HAL_Init+0x6c>)
 8000d30:	5cd3      	ldrb	r3, [r2, r3]
 8000d32:	f003 031f 	and.w	r3, r3, #31
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <HAL_Init+0x70>)
 8000d3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_Init+0x74>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f814 	bl	8000d74 <HAL_InitTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e002      	b.n	8000d5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d56:	f7ff fd1d 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	58024400 	.word	0x58024400
 8000d68:	08005210 	.word	0x08005210
 8000d6c:	24000004 	.word	0x24000004
 8000d70:	24000000 	.word	0x24000000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_InitTick+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e021      	b.n	8000dcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_InitTick+0x64>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_InitTick+0x60>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f921 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f8f9 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x68>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2400000c 	.word	0x2400000c
 8000dd8:	24000000 	.word	0x24000000
 8000ddc:	24000008 	.word	0x24000008

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2400000c 	.word	0x2400000c
 8000e04:	24000330 	.word	0x24000330

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	24000330 	.word	0x24000330

08000e20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetREVID+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	0c1b      	lsrs	r3, r3, #16
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	5c001000 	.word	0x5c001000

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <__NVIC_SetPriorityGrouping+0x40>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x40>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	05fa0000 	.word	0x05fa0000

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff5e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff90 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5f 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffb2 	bl	8000f58 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800100e:	4b89      	ldr	r3, [pc, #548]	; (8001234 <HAL_GPIO_Init+0x234>)
 8001010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001012:	e194      	b.n	800133e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8186 	beq.w	8001338 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d005      	beq.n	8001044 <HAL_GPIO_Init+0x44>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d130      	bne.n	80010a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800107a:	2201      	movs	r2, #1
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 0201 	and.w	r2, r3, #1
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d017      	beq.n	80010e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d123      	bne.n	8001136 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	08da      	lsrs	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3208      	adds	r2, #8
 8001130:	69b9      	ldr	r1, [r7, #24]
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0203 	and.w	r2, r3, #3
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80e0 	beq.w	8001338 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_GPIO_Init+0x238>)
 800117a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <HAL_GPIO_Init+0x238>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_GPIO_Init+0x238>)
 800118a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001196:	4a29      	ldr	r2, [pc, #164]	; (800123c <HAL_GPIO_Init+0x23c>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <HAL_GPIO_Init+0x240>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d052      	beq.n	8001268 <HAL_GPIO_Init+0x268>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_GPIO_Init+0x244>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d031      	beq.n	800122e <HAL_GPIO_Init+0x22e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <HAL_GPIO_Init+0x248>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x22a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_GPIO_Init+0x24c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x226>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_GPIO_Init+0x250>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x222>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_GPIO_Init+0x254>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x21e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x258>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x21a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_GPIO_Init+0x25c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x216>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x260>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x212>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_GPIO_Init+0x264>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x20e>
 800120a:	2309      	movs	r3, #9
 800120c:	e02d      	b.n	800126a <HAL_GPIO_Init+0x26a>
 800120e:	230a      	movs	r3, #10
 8001210:	e02b      	b.n	800126a <HAL_GPIO_Init+0x26a>
 8001212:	2308      	movs	r3, #8
 8001214:	e029      	b.n	800126a <HAL_GPIO_Init+0x26a>
 8001216:	2307      	movs	r3, #7
 8001218:	e027      	b.n	800126a <HAL_GPIO_Init+0x26a>
 800121a:	2306      	movs	r3, #6
 800121c:	e025      	b.n	800126a <HAL_GPIO_Init+0x26a>
 800121e:	2305      	movs	r3, #5
 8001220:	e023      	b.n	800126a <HAL_GPIO_Init+0x26a>
 8001222:	2304      	movs	r3, #4
 8001224:	e021      	b.n	800126a <HAL_GPIO_Init+0x26a>
 8001226:	2303      	movs	r3, #3
 8001228:	e01f      	b.n	800126a <HAL_GPIO_Init+0x26a>
 800122a:	2302      	movs	r3, #2
 800122c:	e01d      	b.n	800126a <HAL_GPIO_Init+0x26a>
 800122e:	2301      	movs	r3, #1
 8001230:	e01b      	b.n	800126a <HAL_GPIO_Init+0x26a>
 8001232:	bf00      	nop
 8001234:	58000080 	.word	0x58000080
 8001238:	58024400 	.word	0x58024400
 800123c:	58000400 	.word	0x58000400
 8001240:	58020000 	.word	0x58020000
 8001244:	58020400 	.word	0x58020400
 8001248:	58020800 	.word	0x58020800
 800124c:	58020c00 	.word	0x58020c00
 8001250:	58021000 	.word	0x58021000
 8001254:	58021400 	.word	0x58021400
 8001258:	58021800 	.word	0x58021800
 800125c:	58021c00 	.word	0x58021c00
 8001260:	58022000 	.word	0x58022000
 8001264:	58022400 	.word	0x58022400
 8001268:	2300      	movs	r3, #0
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127a:	4938      	ldr	r1, [pc, #224]	; (800135c <HAL_GPIO_Init+0x35c>)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	3301      	adds	r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	f47f ae63 	bne.w	8001014 <HAL_GPIO_Init+0x14>
  }
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	3724      	adds	r7, #36	; 0x24
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58000400 	.word	0x58000400

08001360 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_PWREx_ConfigSupply+0x70>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b04      	cmp	r3, #4
 8001372:	d00a      	beq.n	800138a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d001      	beq.n	8001386 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e01f      	b.n	80013c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e01d      	b.n	80013c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_PWREx_ConfigSupply+0x70>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f023 0207 	bic.w	r2, r3, #7
 8001392:	490f      	ldr	r1, [pc, #60]	; (80013d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4313      	orrs	r3, r2
 8001398:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800139a:	f7ff fd35 	bl	8000e08 <HAL_GetTick>
 800139e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013a0:	e009      	b.n	80013b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013a2:	f7ff fd31 	bl	8000e08 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b0:	d901      	bls.n	80013b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e007      	b.n	80013c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_PWREx_ConfigSupply+0x70>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	d1ee      	bne.n	80013a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	58024800 	.word	0x58024800

080013d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f000 bc1c 	b.w	8001c20 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 8087 	beq.w	8001504 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f6:	4b9e      	ldr	r3, [pc, #632]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001400:	4b9b      	ldr	r3, [pc, #620]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	2b10      	cmp	r3, #16
 800140a:	d007      	beq.n	800141c <HAL_RCC_OscConfig+0x48>
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	2b18      	cmp	r3, #24
 8001410:	d110      	bne.n	8001434 <HAL_RCC_OscConfig+0x60>
 8001412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d10b      	bne.n	8001434 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4b94      	ldr	r3, [pc, #592]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d06c      	beq.n	8001502 <HAL_RCC_OscConfig+0x12e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d168      	bne.n	8001502 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e3f5      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x78>
 800143e:	4b8c      	ldr	r3, [pc, #560]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a8b      	ldr	r2, [pc, #556]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e02e      	b.n	80014aa <HAL_RCC_OscConfig+0xd6>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0x9a>
 8001454:	4b86      	ldr	r3, [pc, #536]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a85      	ldr	r2, [pc, #532]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b83      	ldr	r3, [pc, #524]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a82      	ldr	r2, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e01d      	b.n	80014aa <HAL_RCC_OscConfig+0xd6>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001476:	d10c      	bne.n	8001492 <HAL_RCC_OscConfig+0xbe>
 8001478:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800147e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a79      	ldr	r2, [pc, #484]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800148a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e00b      	b.n	80014aa <HAL_RCC_OscConfig+0xd6>
 8001492:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a76      	ldr	r2, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b74      	ldr	r3, [pc, #464]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a73      	ldr	r2, [pc, #460]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d013      	beq.n	80014da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fca9 	bl	8000e08 <HAL_GetTick>
 80014b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ba:	f7ff fca5 	bl	8000e08 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b64      	cmp	r3, #100	; 0x64
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e3a9      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0xe6>
 80014d8:	e014      	b.n	8001504 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff fc95 	bl	8000e08 <HAL_GetTick>
 80014de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fc91 	bl	8000e08 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	; 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e395      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f4:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x10e>
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80ca 	beq.w	80016a6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001512:	4b57      	ldr	r3, [pc, #348]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800151a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800151c:	4b54      	ldr	r3, [pc, #336]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <HAL_RCC_OscConfig+0x164>
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	2b18      	cmp	r3, #24
 800152c:	d156      	bne.n	80015dc <HAL_RCC_OscConfig+0x208>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d151      	bne.n	80015dc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x17c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e367      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001550:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 0219 	bic.w	r2, r3, #25
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4944      	ldr	r1, [pc, #272]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001562:	f7ff fc51 	bl	8000e08 <HAL_GetTick>
 8001566:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fc4d 	bl	8000e08 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e351      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800157c:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	f7ff fc4a 	bl	8000e20 <HAL_GetREVID>
 800158c:	4603      	mov	r3, r0
 800158e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001592:	4293      	cmp	r3, r2
 8001594:	d817      	bhi.n	80015c6 <HAL_RCC_OscConfig+0x1f2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b40      	cmp	r3, #64	; 0x40
 800159c:	d108      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1dc>
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015a6:	4a32      	ldr	r2, [pc, #200]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ae:	e07a      	b.n	80016a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	031b      	lsls	r3, r3, #12
 80015be:	492c      	ldr	r1, [pc, #176]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c4:	e06f      	b.n	80016a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	061b      	lsls	r3, r3, #24
 80015d4:	4926      	ldr	r1, [pc, #152]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015da:	e064      	b.n	80016a6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d047      	beq.n	8001674 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 0219 	bic.w	r2, r3, #25
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	491f      	ldr	r1, [pc, #124]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fc07 	bl	8000e08 <HAL_GetTick>
 80015fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fc03 	bl	8000e08 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e307      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	f7ff fc00 	bl	8000e20 <HAL_GetREVID>
 8001620:	4603      	mov	r3, r0
 8001622:	f241 0203 	movw	r2, #4099	; 0x1003
 8001626:	4293      	cmp	r3, r2
 8001628:	d817      	bhi.n	800165a <HAL_RCC_OscConfig+0x286>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2b40      	cmp	r3, #64	; 0x40
 8001630:	d108      	bne.n	8001644 <HAL_RCC_OscConfig+0x270>
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800163a:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	6053      	str	r3, [r2, #4]
 8001642:	e030      	b.n	80016a6 <HAL_RCC_OscConfig+0x2d2>
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	031b      	lsls	r3, r3, #12
 8001652:	4907      	ldr	r1, [pc, #28]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
 8001658:	e025      	b.n	80016a6 <HAL_RCC_OscConfig+0x2d2>
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	4901      	ldr	r1, [pc, #4]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
 800166e:	e01a      	b.n	80016a6 <HAL_RCC_OscConfig+0x2d2>
 8001670:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001674:	4b9e      	ldr	r3, [pc, #632]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a9d      	ldr	r2, [pc, #628]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fbc2 	bl	8000e08 <HAL_GetTick>
 8001684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fbbe 	bl	8000e08 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e2c2      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800169a:	4b95      	ldr	r3, [pc, #596]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80a9 	beq.w	8001806 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b4:	4b8e      	ldr	r3, [pc, #568]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016be:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d007      	beq.n	80016da <HAL_RCC_OscConfig+0x306>
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b18      	cmp	r3, #24
 80016ce:	d13a      	bne.n	8001746 <HAL_RCC_OscConfig+0x372>
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d135      	bne.n	8001746 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016da:	4b85      	ldr	r3, [pc, #532]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x31e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b80      	cmp	r3, #128	; 0x80
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e296      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016f2:	f7ff fb95 	bl	8000e20 <HAL_GetREVID>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d817      	bhi.n	8001730 <HAL_RCC_OscConfig+0x35c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	2b20      	cmp	r3, #32
 8001706:	d108      	bne.n	800171a <HAL_RCC_OscConfig+0x346>
 8001708:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001710:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001716:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001718:	e075      	b.n	8001806 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800171a:	4b75      	ldr	r3, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	069b      	lsls	r3, r3, #26
 8001728:	4971      	ldr	r1, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800172e:	e06a      	b.n	8001806 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001730:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	496c      	ldr	r1, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001740:	4313      	orrs	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001744:	e05f      	b.n	8001806 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d042      	beq.n	80017d4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800174e:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fb55 	bl	8000e08 <HAL_GetTick>
 800175e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001762:	f7ff fb51 	bl	8000e08 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e255      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001774:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001780:	f7ff fb4e 	bl	8000e20 <HAL_GetREVID>
 8001784:	4603      	mov	r3, r0
 8001786:	f241 0203 	movw	r2, #4099	; 0x1003
 800178a:	4293      	cmp	r3, r2
 800178c:	d817      	bhi.n	80017be <HAL_RCC_OscConfig+0x3ea>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	2b20      	cmp	r3, #32
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_OscConfig+0x3d4>
 8001796:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800179e:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80017a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017a4:	6053      	str	r3, [r2, #4]
 80017a6:	e02e      	b.n	8001806 <HAL_RCC_OscConfig+0x432>
 80017a8:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	069b      	lsls	r3, r3, #26
 80017b6:	494e      	ldr	r1, [pc, #312]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
 80017bc:	e023      	b.n	8001806 <HAL_RCC_OscConfig+0x432>
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	061b      	lsls	r3, r3, #24
 80017cc:	4948      	ldr	r1, [pc, #288]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60cb      	str	r3, [r1, #12]
 80017d2:	e018      	b.n	8001806 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017d4:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a45      	ldr	r2, [pc, #276]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80017da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb12 	bl	8000e08 <HAL_GetTick>
 80017e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017e8:	f7ff fb0e 	bl	8000e08 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e212      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d036      	beq.n	8001880 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d019      	beq.n	800184e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 800181c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff faef 	bl	8000e08 <HAL_GetTick>
 800182a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff faeb 	bl	8000e08 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1ef      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x45a>
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001852:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fad5 	bl	8000e08 <HAL_GetTick>
 800185e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff fad1 	bl	8000e08 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1d5      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b00      	cmp	r3, #0
 800188a:	d039      	beq.n	8001900 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d019      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 800189a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800189e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fab2 	bl	8000e08 <HAL_GetTick>
 80018a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018a8:	f7ff faae 	bl	8000e08 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e1b2      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x4d4>
 80018c6:	e01b      	b.n	8001900 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_RCC_OscConfig+0x51c>)
 80018ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fa98 	bl	8000e08 <HAL_GetTick>
 80018d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018dc:	f7ff fa94 	bl	8000e08 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d904      	bls.n	80018f4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e198      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
 80018ee:	bf00      	nop
 80018f0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018f4:	4ba3      	ldr	r3, [pc, #652]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ed      	bne.n	80018dc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8081 	beq.w	8001a10 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800190e:	4b9e      	ldr	r3, [pc, #632]	; (8001b88 <HAL_RCC_OscConfig+0x7b4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a9d      	ldr	r2, [pc, #628]	; (8001b88 <HAL_RCC_OscConfig+0x7b4>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800191a:	f7ff fa75 	bl	8000e08 <HAL_GetTick>
 800191e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fa71 	bl	8000e08 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e175      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001934:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <HAL_RCC_OscConfig+0x7b4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x582>
 8001948:	4b8e      	ldr	r3, [pc, #568]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a8d      	ldr	r2, [pc, #564]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_OscConfig+0x5de>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x5a4>
 800195e:	4b89      	ldr	r3, [pc, #548]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a88      	ldr	r2, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b86      	ldr	r3, [pc, #536]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a85      	ldr	r2, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
 8001976:	e01c      	b.n	80019b2 <HAL_RCC_OscConfig+0x5de>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x5c6>
 8001980:	4b80      	ldr	r3, [pc, #512]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a7f      	ldr	r2, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a7c      	ldr	r2, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x5de>
 800199a:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a79      	ldr	r2, [pc, #484]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	4b77      	ldr	r3, [pc, #476]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4a76      	ldr	r2, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ba:	f7ff fa25 	bl	8000e08 <HAL_GetTick>
 80019be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fa21 	bl	8000e08 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e123      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x5ee>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa0f 	bl	8000e08 <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff fa0b 	bl	8000e08 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e10d      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a04:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8102 	beq.w	8001c1e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a1a:	4b5a      	ldr	r3, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a22:	2b18      	cmp	r3, #24
 8001a24:	f000 80bd 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	f040 8095 	bne.w	8001b5c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b54      	ldr	r3, [pc, #336]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a53      	ldr	r2, [pc, #332]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001a38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f9e3 	bl	8000e08 <HAL_GetTick>
 8001a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f9df 	bl	8000e08 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0e3      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a58:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <HAL_RCC_OscConfig+0x7b8>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	430a      	orrs	r2, r1
 8001a78:	4942      	ldr	r1, [pc, #264]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	628b      	str	r3, [r1, #40]	; 0x28
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001aae:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_RCC_OscConfig+0x7bc>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001acc:	00d2      	lsls	r2, r2, #3
 8001ace:	492d      	ldr	r1, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	f023 020c 	bic.w	r2, r3, #12
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	4928      	ldr	r1, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f023 0202 	bic.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4924      	ldr	r1, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f968 	bl	8000e08 <HAL_GetTick>
 8001b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff f964 	bl	8000e08 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e068      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x768>
 8001b5a:	e060      	b.n	8001c1e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_RCC_OscConfig+0x7b0>)
 8001b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f94e 	bl	8000e08 <HAL_GetTick>
 8001b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b6e:	e011      	b.n	8001b94 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f94a 	bl	8000e08 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d90a      	bls.n	8001b94 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04e      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
 8001b82:	bf00      	nop
 8001b84:	58024400 	.word	0x58024400
 8001b88:	58024800 	.word	0x58024800
 8001b8c:	fffffc0c 	.word	0xfffffc0c
 8001b90:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_OscConfig+0x854>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e7      	bne.n	8001b70 <HAL_RCC_OscConfig+0x79c>
 8001ba0:	e03d      	b.n	8001c1e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_RCC_OscConfig+0x854>)
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_RCC_OscConfig+0x854>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d031      	beq.n	8001c1a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d12a      	bne.n	8001c1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d122      	bne.n	8001c1a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d11a      	bne.n	8001c1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	0a5b      	lsrs	r3, r3, #9
 8001be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d111      	bne.n	8001c1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d108      	bne.n	8001c1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	0e1b      	lsrs	r3, r3, #24
 8001c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3730      	adds	r7, #48	; 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	58024400 	.word	0x58024400

08001c2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e19c      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d910      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b87      	ldr	r3, [pc, #540]	; (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	4985      	ldr	r1, [pc, #532]	; (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e184      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d010      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d908      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c8c:	4b78      	ldr	r3, [pc, #480]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4975      	ldr	r1, [pc, #468]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	4b70      	ldr	r3, [pc, #448]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d908      	bls.n	8001ccc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cba:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	496a      	ldr	r1, [pc, #424]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d010      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699a      	ldr	r2, [r3, #24]
 8001cdc:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d908      	bls.n	8001cfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ce8:	4b61      	ldr	r3, [pc, #388]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	495e      	ldr	r1, [pc, #376]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d908      	bls.n	8001d28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d16:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	4953      	ldr	r1, [pc, #332]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d010      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d908      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f023 020f 	bic.w	r2, r3, #15
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4947      	ldr	r1, [pc, #284]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d055      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d62:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4940      	ldr	r1, [pc, #256]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d7c:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d121      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0f6      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d115      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0ea      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dac:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0de      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d6      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dcc:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f023 0207 	bic.w	r2, r3, #7
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4925      	ldr	r1, [pc, #148]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7ff f813 	bl	8000e08 <HAL_GetTick>
 8001de2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7ff f80f 	bl	8000e08 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0be      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d1eb      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d208      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f023 020f 	bic.w	r2, r3, #15
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	490e      	ldr	r1, [pc, #56]	; (8001e70 <HAL_RCC_ClockConfig+0x244>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d214      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 020f 	bic.w	r2, r3, #15
 8001e52:	4906      	ldr	r1, [pc, #24]	; (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <HAL_RCC_ClockConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e086      	b.n	8001f7a <HAL_RCC_ClockConfig+0x34e>
 8001e6c:	52002000 	.word	0x52002000
 8001e70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d208      	bcs.n	8001ea2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4939      	ldr	r1, [pc, #228]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d208      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	492e      	ldr	r1, [pc, #184]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d208      	bcs.n	8001efe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4922      	ldr	r1, [pc, #136]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d208      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4917      	ldr	r1, [pc, #92]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f2c:	f000 f844 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	4912      	ldr	r1, [pc, #72]	; (8001f88 <HAL_RCC_ClockConfig+0x35c>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_RCC_ClockConfig+0x358>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_RCC_ClockConfig+0x35c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x360>)
 8001f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_RCC_ClockConfig+0x364>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x368>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe ff00 	bl	8000d74 <HAL_InitTick>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	58024400 	.word	0x58024400
 8001f88:	08005210 	.word	0x08005210
 8001f8c:	24000004 	.word	0x24000004
 8001f90:	24000000 	.word	0x24000000
 8001f94:	24000008 	.word	0x24000008

08001f98 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_RCC_EnableCSS+0x1c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_RCC_EnableCSS+0x1c>)
 8001fa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	58024400 	.word	0x58024400

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fbe:	4bb3      	ldr	r3, [pc, #716]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fc6:	2b18      	cmp	r3, #24
 8001fc8:	f200 8155 	bhi.w	8002276 <HAL_RCC_GetSysClockFreq+0x2be>
 8001fcc:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08002039 	.word	0x08002039
 8001fd8:	08002277 	.word	0x08002277
 8001fdc:	08002277 	.word	0x08002277
 8001fe0:	08002277 	.word	0x08002277
 8001fe4:	08002277 	.word	0x08002277
 8001fe8:	08002277 	.word	0x08002277
 8001fec:	08002277 	.word	0x08002277
 8001ff0:	08002277 	.word	0x08002277
 8001ff4:	0800205f 	.word	0x0800205f
 8001ff8:	08002277 	.word	0x08002277
 8001ffc:	08002277 	.word	0x08002277
 8002000:	08002277 	.word	0x08002277
 8002004:	08002277 	.word	0x08002277
 8002008:	08002277 	.word	0x08002277
 800200c:	08002277 	.word	0x08002277
 8002010:	08002277 	.word	0x08002277
 8002014:	08002065 	.word	0x08002065
 8002018:	08002277 	.word	0x08002277
 800201c:	08002277 	.word	0x08002277
 8002020:	08002277 	.word	0x08002277
 8002024:	08002277 	.word	0x08002277
 8002028:	08002277 	.word	0x08002277
 800202c:	08002277 	.word	0x08002277
 8002030:	08002277 	.word	0x08002277
 8002034:	0800206b 	.word	0x0800206b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002038:	4b94      	ldr	r3, [pc, #592]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002044:	4b91      	ldr	r3, [pc, #580]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	4a90      	ldr	r2, [pc, #576]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002056:	e111      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002058:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800205a:	61bb      	str	r3, [r7, #24]
    break;
 800205c:	e10e      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800205e:	4b8d      	ldr	r3, [pc, #564]	; (8002294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002060:	61bb      	str	r3, [r7, #24]
    break;
 8002062:	e10b      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002064:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002066:	61bb      	str	r3, [r7, #24]
    break;
 8002068:	e108      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002074:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800207e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002080:	4b82      	ldr	r3, [pc, #520]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800208a:	4b80      	ldr	r3, [pc, #512]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80e1 	beq.w	8002270 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	f000 8083 	beq.w	80021bc <HAL_RCC_GetSysClockFreq+0x204>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	f200 80a1 	bhi.w	8002200 <HAL_RCC_GetSysClockFreq+0x248>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x114>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d056      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020ca:	e099      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020cc:	4b6f      	ldr	r3, [pc, #444]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d02d      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80020d8:	4b6c      	ldr	r3, [pc, #432]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	4a6b      	ldr	r2, [pc, #428]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002102:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002112:	ed97 6a02 	vldr	s12, [r7, #8]
 8002116:	eddf 5a61 	vldr	s11, [pc, #388]	; 800229c <HAL_RCC_GetSysClockFreq+0x2e4>
 800211a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800211e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002132:	e087      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002156:	ed97 6a02 	vldr	s12, [r7, #8]
 800215a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800229c <HAL_RCC_GetSysClockFreq+0x2e4>
 800215e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800216a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002176:	e065      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002182:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218a:	4b40      	ldr	r3, [pc, #256]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219a:	ed97 6a02 	vldr	s12, [r7, #8]
 800219e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800229c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021ba:	e043      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021de:	ed97 6a02 	vldr	s12, [r7, #8]
 80021e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800229c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021fe:	e021      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800220e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002222:	ed97 6a02 	vldr	s12, [r7, #8]
 8002226:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800229c <HAL_RCC_GetSysClockFreq+0x2e4>
 800222a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800222e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002242:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	0a5b      	lsrs	r3, r3, #9
 800224a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800224e:	3301      	adds	r3, #1
 8002250:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002268:	ee17 3a90 	vmov	r3, s15
 800226c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800226e:	e005      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
    break;
 8002274:	e002      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002278:	61bb      	str	r3, [r7, #24]
    break;
 800227a:	bf00      	nop
  }

  return sysclockfreq;
 800227c:	69bb      	ldr	r3, [r7, #24]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	58024400 	.word	0x58024400
 8002290:	03d09000 	.word	0x03d09000
 8002294:	003d0900 	.word	0x003d0900
 8002298:	016e3600 	.word	0x016e3600
 800229c:	46000000 	.word	0x46000000
 80022a0:	4c742400 	.word	0x4c742400
 80022a4:	4a742400 	.word	0x4a742400
 80022a8:	4bb71b00 	.word	0x4bb71b00

080022ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80022b2:	f7ff fe81 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_GetHCLKFreq+0x50>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	490f      	ldr	r1, [pc, #60]	; (8002300 <HAL_RCC_GetHCLKFreq+0x54>)
 80022c4:	5ccb      	ldrb	r3, [r1, r3]
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_GetHCLKFreq+0x50>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_RCC_GetHCLKFreq+0x54>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_RCC_GetHCLKFreq+0x58>)
 80022e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_GetHCLKFreq+0x58>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	58024400 	.word	0x58024400
 8002300:	08005210 	.word	0x08005210
 8002304:	24000004 	.word	0x24000004
 8002308:	24000000 	.word	0x24000000

0800230c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	d105      	bne.n	800232a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800231e:	f000 f809 	bl	8002334 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002328:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	58024400 	.word	0x58024400

08002334 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800234c:	2300      	movs	r3, #0
 800234e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002350:	2300      	movs	r3, #0
 8002352:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03f      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002368:	d02a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800236a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800236e:	d824      	bhi.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002374:	d018      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800237a:	d81e      	bhi.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002384:	d007      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002386:	e018      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002388:	4bab      	ldr	r3, [pc, #684]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	4aaa      	ldr	r2, [pc, #680]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800238e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002392:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002394:	e015      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	2102      	movs	r1, #2
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fff3 	bl	8004388 <RCCEx_PLL2_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80023a6:	e00c      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3324      	adds	r3, #36	; 0x24
 80023ac:	2102      	movs	r1, #2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 f89c 	bl	80044ec <RCCEx_PLL3_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80023b8:	e003      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
      break;
 80023be:	e000      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023c8:	4b9b      	ldr	r3, [pc, #620]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d4:	4998      	ldr	r1, [pc, #608]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	650b      	str	r3, [r1, #80]	; 0x50
 80023da:	e001      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d03d      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d826      	bhi.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023f4:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80023f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fa:	bf00      	nop
 80023fc:	08002411 	.word	0x08002411
 8002400:	0800241f 	.word	0x0800241f
 8002404:	08002431 	.word	0x08002431
 8002408:	08002449 	.word	0x08002449
 800240c:	08002449 	.word	0x08002449
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002410:	4b89      	ldr	r3, [pc, #548]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	4a88      	ldr	r2, [pc, #544]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800241c:	e015      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f001 ffaf 	bl	8004388 <RCCEx_PLL2_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800242e:	e00c      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3324      	adds	r3, #36	; 0x24
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f002 f858 	bl	80044ec <RCCEx_PLL3_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002440:	e003      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	75fb      	strb	r3, [r7, #23]
      break;
 8002446:	e000      	b.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002450:	4b79      	ldr	r3, [pc, #484]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002454:	f023 0207 	bic.w	r2, r3, #7
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	4976      	ldr	r1, [pc, #472]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	650b      	str	r3, [r1, #80]	; 0x50
 8002462:	e001      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002470:	2b00      	cmp	r3, #0
 8002472:	d042      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247c:	d02b      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800247e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002482:	d825      	bhi.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002484:	2bc0      	cmp	r3, #192	; 0xc0
 8002486:	d028      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002488:	2bc0      	cmp	r3, #192	; 0xc0
 800248a:	d821      	bhi.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d016      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d81d      	bhi.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d007      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800249c:	e018      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800249e:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024aa:	e017      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 ff68 	bl	8004388 <RCCEx_PLL2_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024bc:	e00e      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3324      	adds	r3, #36	; 0x24
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 f811 	bl	80044ec <RCCEx_PLL3_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024ce:	e005      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	75fb      	strb	r3, [r7, #23]
      break;
 80024d4:	e002      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80024da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024e2:	4b55      	ldr	r3, [pc, #340]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	4952      	ldr	r1, [pc, #328]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	650b      	str	r3, [r1, #80]	; 0x50
 80024f4:	e001      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d049      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800250c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002510:	d030      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002516:	d82a      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002518:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800251c:	d02c      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800251e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002522:	d824      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002528:	d018      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800252a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800252e:	d81e      	bhi.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002538:	d007      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800253a:	e018      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800253c:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002548:	e017      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f001 ff19 	bl	8004388 <RCCEx_PLL2_Config>
 8002556:	4603      	mov	r3, r0
 8002558:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800255a:	e00e      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3324      	adds	r3, #36	; 0x24
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f001 ffc2 	bl	80044ec <RCCEx_PLL3_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800256c:	e005      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
      break;
 8002572:	e002      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002574:	bf00      	nop
 8002576:	e000      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800257a:	7dfb      	ldrb	r3, [r7, #23]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800258e:	492a      	ldr	r1, [pc, #168]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	658b      	str	r3, [r1, #88]	; 0x58
 8002594:	e001      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d04c      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80025ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b0:	d030      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80025b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b6:	d82a      	bhi.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025bc:	d02c      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80025be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025c2:	d824      	bhi.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025c8:	d018      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80025ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ce:	d81e      	bhi.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d007      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80025da:	e018      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	4a15      	ldr	r2, [pc, #84]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025e8:	e017      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 fec9 	bl	8004388 <RCCEx_PLL2_Config>
 80025f6:	4603      	mov	r3, r0
 80025f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80025fa:	e00e      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3324      	adds	r3, #36	; 0x24
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f001 ff72 	bl	80044ec <RCCEx_PLL3_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800260c:	e005      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
      break;
 8002612:	e002      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002614:	bf00      	nop
 8002616:	e000      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10d      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800262e:	4902      	ldr	r1, [pc, #8]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	658b      	str	r3, [r1, #88]	; 0x58
 8002634:	e004      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002636:	bf00      	nop
 8002638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d032      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	2b30      	cmp	r3, #48	; 0x30
 8002652:	d01c      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002654:	2b30      	cmp	r3, #48	; 0x30
 8002656:	d817      	bhi.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002658:	2b20      	cmp	r3, #32
 800265a:	d00c      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d813      	bhi.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d016      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002664:	2b10      	cmp	r3, #16
 8002666:	d10f      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002668:	4baf      	ldr	r3, [pc, #700]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	4aae      	ldr	r2, [pc, #696]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800266e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002672:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002674:	e00e      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	2102      	movs	r1, #2
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fe83 	bl	8004388 <RCCEx_PLL2_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002686:	e005      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	75fb      	strb	r3, [r7, #23]
      break;
 800268c:	e002      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800268e:	bf00      	nop
 8002690:	e000      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800269a:	4ba3      	ldr	r3, [pc, #652]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a6:	49a0      	ldr	r1, [pc, #640]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80026ac:	e001      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d047      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c6:	d030      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80026c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026cc:	d82a      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80026ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026d2:	d02c      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80026d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026d8:	d824      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80026da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026de:	d018      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80026e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e4:	d81e      	bhi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	d007      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80026f0:	e018      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f2:	4b8d      	ldr	r3, [pc, #564]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	4a8c      	ldr	r2, [pc, #560]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80026fe:	e017      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f001 fe3e 	bl	8004388 <RCCEx_PLL2_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002710:	e00e      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3324      	adds	r3, #36	; 0x24
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f001 fee7 	bl	80044ec <RCCEx_PLL3_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002722:	e005      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	75fb      	strb	r3, [r7, #23]
      break;
 8002728:	e002      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800272e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002736:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	4979      	ldr	r1, [pc, #484]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	650b      	str	r3, [r1, #80]	; 0x50
 8002748:	e001      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
 800274c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d049      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002762:	d02e      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002768:	d828      	bhi.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800276a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800276e:	d02a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002770:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002774:	d822      	bhi.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002776:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800277a:	d026      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x486>
 800277c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002780:	d81c      	bhi.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002786:	d010      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800278c:	d816      	bhi.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01d      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002796:	d111      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fdf2 	bl	8004388 <RCCEx_PLL2_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027a8:	e012      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3324      	adds	r3, #36	; 0x24
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 fe9b 	bl	80044ec <RCCEx_PLL3_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027ba:	e009      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
      break;
 80027c0:	e006      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80027c2:	bf00      	nop
 80027c4:	e004      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80027c6:	bf00      	nop
 80027c8:	e002      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80027ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80027d6:	4b54      	ldr	r3, [pc, #336]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027da:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e2:	4951      	ldr	r1, [pc, #324]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	650b      	str	r3, [r1, #80]	; 0x50
 80027e8:	e001      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d04b      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002804:	d02e      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280a:	d828      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d02a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002816:	d822      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002818:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800281c:	d026      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800281e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002822:	d81c      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002828:	d010      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800282a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800282e:	d816      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01d      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002838:	d111      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fda1 	bl	8004388 <RCCEx_PLL2_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800284a:	e012      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3324      	adds	r3, #36	; 0x24
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f001 fe4a 	bl	80044ec <RCCEx_PLL3_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800285c:	e009      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
      break;
 8002862:	e006      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002864:	bf00      	nop
 8002866:	e004      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002868:	bf00      	nop
 800286a:	e002      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002886:	4928      	ldr	r1, [pc, #160]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	658b      	str	r3, [r1, #88]	; 0x58
 800288c:	e001      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d02f      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028a6:	d00e      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80028a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ac:	d814      	bhi.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d015      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80028b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028b6:	d10f      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028c4:	e00c      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2101      	movs	r1, #1
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 fd5b 	bl	8004388 <RCCEx_PLL2_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028d6:	e003      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	75fb      	strb	r3, [r7, #23]
      break;
 80028dc:	e000      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80028de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f2:	490d      	ldr	r1, [pc, #52]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	650b      	str	r3, [r1, #80]	; 0x50
 80028f8:	e001      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d033      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	2b03      	cmp	r3, #3
 8002910:	d81c      	bhi.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	08002953 	.word	0x08002953
 800291c:	0800292d 	.word	0x0800292d
 8002920:	0800293b 	.word	0x0800293b
 8002924:	08002953 	.word	0x08002953
 8002928:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800292c:	4bb8      	ldr	r3, [pc, #736]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	4ab7      	ldr	r2, [pc, #732]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002938:	e00c      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	2102      	movs	r1, #2
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fd21 	bl	8004388 <RCCEx_PLL2_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800294a:	e003      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
      break;
 8002950:	e000      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800295a:	4bad      	ldr	r3, [pc, #692]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	49aa      	ldr	r1, [pc, #680]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800296c:	e001      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8086 	beq.w	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002980:	4ba4      	ldr	r3, [pc, #656]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4aa3      	ldr	r2, [pc, #652]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800298c:	f7fe fa3c 	bl	8000e08 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002992:	e009      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fa38 	bl	8000e08 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d902      	bls.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	75fb      	strb	r3, [r7, #23]
        break;
 80029a6:	e005      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a8:	4b9a      	ldr	r3, [pc, #616]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ef      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d166      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029ba:	4b95      	ldr	r3, [pc, #596]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029c4:	4053      	eors	r3, r2
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d013      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ce:	4b90      	ldr	r3, [pc, #576]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029d8:	4b8d      	ldr	r3, [pc, #564]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a8c      	ldr	r2, [pc, #560]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029e4:	4b8a      	ldr	r3, [pc, #552]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a89      	ldr	r2, [pc, #548]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029f0:	4a87      	ldr	r2, [pc, #540]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a00:	d115      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fe fa01 	bl	8000e08 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a08:	e00b      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe f9fd 	bl	8000e08 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d902      	bls.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	75fb      	strb	r3, [r7, #23]
            break;
 8002a20:	e005      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a22:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ed      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d126      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a42:	d10d      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002a44:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a52:	0919      	lsrs	r1, r3, #4
 8002a54:	4b70      	ldr	r3, [pc, #448]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002a56:	400b      	ands	r3, r1
 8002a58:	496d      	ldr	r1, [pc, #436]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	610b      	str	r3, [r1, #16]
 8002a5e:	e005      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002a60:	4b6b      	ldr	r3, [pc, #428]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	4a6a      	ldr	r2, [pc, #424]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a6a:	6113      	str	r3, [r2, #16]
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7a:	4965      	ldr	r1, [pc, #404]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	670b      	str	r3, [r1, #112]	; 0x70
 8002a80:	e004      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	75bb      	strb	r3, [r7, #22]
 8002a86:	e001      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d07e      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a9c:	2b28      	cmp	r3, #40	; 0x28
 8002a9e:	d867      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002b77 	.word	0x08002b77
 8002aac:	08002b71 	.word	0x08002b71
 8002ab0:	08002b71 	.word	0x08002b71
 8002ab4:	08002b71 	.word	0x08002b71
 8002ab8:	08002b71 	.word	0x08002b71
 8002abc:	08002b71 	.word	0x08002b71
 8002ac0:	08002b71 	.word	0x08002b71
 8002ac4:	08002b71 	.word	0x08002b71
 8002ac8:	08002b4d 	.word	0x08002b4d
 8002acc:	08002b71 	.word	0x08002b71
 8002ad0:	08002b71 	.word	0x08002b71
 8002ad4:	08002b71 	.word	0x08002b71
 8002ad8:	08002b71 	.word	0x08002b71
 8002adc:	08002b71 	.word	0x08002b71
 8002ae0:	08002b71 	.word	0x08002b71
 8002ae4:	08002b71 	.word	0x08002b71
 8002ae8:	08002b5f 	.word	0x08002b5f
 8002aec:	08002b71 	.word	0x08002b71
 8002af0:	08002b71 	.word	0x08002b71
 8002af4:	08002b71 	.word	0x08002b71
 8002af8:	08002b71 	.word	0x08002b71
 8002afc:	08002b71 	.word	0x08002b71
 8002b00:	08002b71 	.word	0x08002b71
 8002b04:	08002b71 	.word	0x08002b71
 8002b08:	08002b77 	.word	0x08002b77
 8002b0c:	08002b71 	.word	0x08002b71
 8002b10:	08002b71 	.word	0x08002b71
 8002b14:	08002b71 	.word	0x08002b71
 8002b18:	08002b71 	.word	0x08002b71
 8002b1c:	08002b71 	.word	0x08002b71
 8002b20:	08002b71 	.word	0x08002b71
 8002b24:	08002b71 	.word	0x08002b71
 8002b28:	08002b77 	.word	0x08002b77
 8002b2c:	08002b71 	.word	0x08002b71
 8002b30:	08002b71 	.word	0x08002b71
 8002b34:	08002b71 	.word	0x08002b71
 8002b38:	08002b71 	.word	0x08002b71
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002b71 	.word	0x08002b71
 8002b44:	08002b71 	.word	0x08002b71
 8002b48:	08002b77 	.word	0x08002b77
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fc18 	bl	8004388 <RCCEx_PLL2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b5c:	e00c      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3324      	adds	r3, #36	; 0x24
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 fcc1 	bl	80044ec <RCCEx_PLL3_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b6e:	e003      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75fb      	strb	r3, [r7, #23]
      break;
 8002b74:	e000      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8a:	4921      	ldr	r1, [pc, #132]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	654b      	str	r3, [r1, #84]	; 0x54
 8002b90:	e001      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03e      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d820      	bhi.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bf3 	.word	0x08002bf3
 8002bb4:	08002bc9 	.word	0x08002bc9
 8002bb8:	08002bdb 	.word	0x08002bdb
 8002bbc:	08002bf3 	.word	0x08002bf3
 8002bc0:	08002bf3 	.word	0x08002bf3
 8002bc4:	08002bf3 	.word	0x08002bf3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 fbda 	bl	8004388 <RCCEx_PLL2_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bd8:	e00c      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3324      	adds	r3, #36	; 0x24
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 fc83 	bl	80044ec <RCCEx_PLL3_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bea:	e003      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8002bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d110      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	4902      	ldr	r1, [pc, #8]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c0c:	e008      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400
 8002c14:	58024800 	.word	0x58024800
 8002c18:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d039      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d820      	bhi.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c7f 	.word	0x08002c7f
 8002c40:	08002c55 	.word	0x08002c55
 8002c44:	08002c67 	.word	0x08002c67
 8002c48:	08002c7f 	.word	0x08002c7f
 8002c4c:	08002c7f 	.word	0x08002c7f
 8002c50:	08002c7f 	.word	0x08002c7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 fb94 	bl	8004388 <RCCEx_PLL2_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c64:	e00c      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3324      	adds	r3, #36	; 0x24
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 fc3d 	bl	80044ec <RCCEx_PLL3_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c76:	e003      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7c:	e000      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8002c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c86:	4bb7      	ldr	r3, [pc, #732]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	49b3      	ldr	r1, [pc, #716]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	658b      	str	r3, [r1, #88]	; 0x58
 8002c9a:	e001      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d04b      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb6:	d02e      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbc:	d828      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d02a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc8:	d822      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002cca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cce:	d026      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002cd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cd4:	d81c      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cda:	d010      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce0:	d816      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01d      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cea:	d111      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 fb48 	bl	8004388 <RCCEx_PLL2_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002cfc:	e012      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3324      	adds	r3, #36	; 0x24
 8002d02:	2102      	movs	r1, #2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fbf1 	bl	80044ec <RCCEx_PLL3_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d0e:	e009      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75fb      	strb	r3, [r7, #23]
      break;
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d2a:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d38:	498a      	ldr	r1, [pc, #552]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	654b      	str	r3, [r1, #84]	; 0x54
 8002d3e:	e001      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d04b      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d5a:	d02e      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002d5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d60:	d828      	bhi.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d66:	d02a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6c:	d822      	bhi.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d72:	d026      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d78:	d81c      	bhi.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7e:	d010      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8002d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d84:	d816      	bhi.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01d      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d111      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 faf6 	bl	8004388 <RCCEx_PLL2_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002da0:	e012      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3324      	adds	r3, #36	; 0x24
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fb9f 	bl	80044ec <RCCEx_PLL3_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002db2:	e009      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
      break;
 8002db8:	e006      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e004      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dce:	4b65      	ldr	r3, [pc, #404]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ddc:	4961      	ldr	r1, [pc, #388]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	658b      	str	r3, [r1, #88]	; 0x58
 8002de2:	e001      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d04b      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dfa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002dfe:	d02e      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8002e00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e04:	d828      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0a:	d02a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8002e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e10:	d822      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002e12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e16:	d026      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002e18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e1c:	d81c      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e22:	d010      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8002e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e28:	d816      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01d      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e32:	d111      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 faa4 	bl	8004388 <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e44:	e012      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3324      	adds	r3, #36	; 0x24
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 fb4d 	bl	80044ec <RCCEx_PLL3_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e56:	e009      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5c:	e006      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e004      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002e62:	bf00      	nop
 8002e64:	e002      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e72:	4b3c      	ldr	r3, [pc, #240]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e80:	4938      	ldr	r1, [pc, #224]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	658b      	str	r3, [r1, #88]	; 0x58
 8002e86:	e001      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	d10a      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3324      	adds	r3, #36	; 0x24
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 fb1e 	bl	80044ec <RCCEx_PLL3_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002eba:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec8:	4926      	ldr	r1, [pc, #152]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee4:	d10a      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3324      	adds	r3, #36	; 0x24
 8002eea:	2102      	movs	r1, #2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 fafd 	bl	80044ec <RCCEx_PLL3_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d036      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f26:	d01f      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002f28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f2c:	d817      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d009      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002f38:	e011      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f001 fa21 	bl	8004388 <RCCEx_PLL2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f4a:	e00e      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3324      	adds	r3, #36	; 0x24
 8002f50:	2102      	movs	r1, #2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 faca 	bl	80044ec <RCCEx_PLL3_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f5c:	e005      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
      break;
 8002f62:	e002      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8002f64:	58024400 	.word	0x58024400
      break;
 8002f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f70:	4b93      	ldr	r3, [pc, #588]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f7e:	4990      	ldr	r1, [pc, #576]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	658b      	str	r3, [r1, #88]	; 0x58
 8002f84:	e001      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d033      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fa0:	d01c      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8002fa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fa6:	d816      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8002fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb2:	d007      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8002fb4:	e00f      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb6:	4b82      	ldr	r3, [pc, #520]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	4a81      	ldr	r2, [pc, #516]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fc2:	e00c      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 fa8e 	bl	80044ec <RCCEx_PLL3_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002fda:	e000      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8002fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fe4:	4b76      	ldr	r3, [pc, #472]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff2:	4973      	ldr	r1, [pc, #460]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ff8:	e001      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d029      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003016:	d007      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003018:	e00f      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301a:	4b69      	ldr	r3, [pc, #420]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	4a68      	ldr	r2, [pc, #416]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003026:	e00b      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	2102      	movs	r1, #2
 800302e:	4618      	mov	r0, r3
 8003030:	f001 f9aa 	bl	8004388 <RCCEx_PLL2_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003038:	e002      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	75fb      	strb	r3, [r7, #23]
      break;
 800303e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003046:	4b5e      	ldr	r3, [pc, #376]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	495b      	ldr	r1, [pc, #364]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003058:	e001      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305a:	7dfb      	ldrb	r3, [r7, #23]
 800305c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3324      	adds	r3, #36	; 0x24
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fa3b 	bl	80044ec <RCCEx_PLL3_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d030      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003094:	d017      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800309a:	d811      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800309c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a0:	d013      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80030a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a6:	d80b      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d010      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80030ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b0:	d106      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b2:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	4a42      	ldr	r2, [pc, #264]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80030be:	e007      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
      break;
 80030c4:	e004      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80030c6:	bf00      	nop
 80030c8:	e002      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80030ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d6:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e2:	4937      	ldr	r1, [pc, #220]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	654b      	str	r3, [r1, #84]	; 0x54
 80030e8:	e001      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030fa:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	492e      	ldr	r1, [pc, #184]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003108:	4313      	orrs	r3, r2
 800310a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003118:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003126:	4926      	ldr	r1, [pc, #152]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003128:	4313      	orrs	r3, r2
 800312a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003138:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800313a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003144:	491e      	ldr	r1, [pc, #120]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800315c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003160:	6113      	str	r3, [r2, #16]
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800316c:	4914      	ldr	r1, [pc, #80]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	da08      	bge.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003186:	490e      	ldr	r1, [pc, #56]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	4906      	ldr	r1, [pc, #24]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80031ac:	7dbb      	ldrb	r3, [r7, #22]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	58024400 	.word	0x58024400

080031c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b090      	sub	sp, #64	; 0x40
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d2:	f040 8095 	bne.w	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80031d6:	4bae      	ldr	r3, [pc, #696]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	f200 8088 	bhi.w	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003205 	.word	0x08003205
 80031f4:	0800322d 	.word	0x0800322d
 80031f8:	08003255 	.word	0x08003255
 80031fc:	080032f1 	.word	0x080032f1
 8003200:	0800327d 	.word	0x0800327d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003204:	4ba2      	ldr	r3, [pc, #648]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003210:	d108      	bne.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003216:	4618      	mov	r0, r3
 8003218:	f000 ff64 	bl	80040e4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003220:	f000 bc95 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003228:	f000 bc91 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800322c:	4b98      	ldr	r3, [pc, #608]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003238:	d108      	bne.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800323a:	f107 0318 	add.w	r3, r7, #24
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fca8 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003248:	f000 bc81 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003250:	f000 bc7d 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003254:	4b8e      	ldr	r3, [pc, #568]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003260:	d108      	bne.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fde8 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003270:	f000 bc6d 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003278:	f000 bc69 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800327c:	4b84      	ldr	r3, [pc, #528]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800327e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003284:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003286:	4b82      	ldr	r3, [pc, #520]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d10c      	bne.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003294:	2b00      	cmp	r3, #0
 8003296:	d109      	bne.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003298:	4b7d      	ldr	r3, [pc, #500]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	4a7c      	ldr	r2, [pc, #496]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032aa:	e01f      	b.n	80032ec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80032ac:	4b78      	ldr	r3, [pc, #480]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b8:	d106      	bne.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c0:	d102      	bne.n	80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80032c2:	4b75      	ldr	r3, [pc, #468]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c6:	e011      	b.n	80032ec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80032c8:	4b71      	ldr	r3, [pc, #452]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032d4:	d106      	bne.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d102      	bne.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80032de:	4b6f      	ldr	r3, [pc, #444]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80032e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e2:	e003      	b.n	80032ec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80032e8:	f000 bc31 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80032ec:	f000 bc2f 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80032f0:	4b6b      	ldr	r3, [pc, #428]	; (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032f4:	f000 bc2b 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80032fc:	f000 bc27 	b.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003306:	f040 8095 	bne.w	8003434 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800330a:	4b61      	ldr	r3, [pc, #388]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8003312:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331a:	d04d      	beq.n	80033b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003322:	f200 8084 	bhi.w	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	2bc0      	cmp	r3, #192	; 0xc0
 800332a:	d07d      	beq.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	2bc0      	cmp	r3, #192	; 0xc0
 8003330:	d87d      	bhi.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d02d      	beq.n	8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	d877      	bhi.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d012      	beq.n	8003370 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800334a:	e070      	b.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800334c:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003358:	d107      	bne.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800335a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fec0 	bl	80040e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003368:	e3f1      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800336e:	e3ee      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003370:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800337c:	d107      	bne.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800337e:	f107 0318 	add.w	r3, r7, #24
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fc06 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800338c:	e3df      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003392:	e3dc      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003394:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800339c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a0:	d107      	bne.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fd48 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80033b0:	e3cd      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80033b6:	e3ca      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80033b8:	4b35      	ldr	r3, [pc, #212]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80033c2:	4b33      	ldr	r3, [pc, #204]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80033ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033d4:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	08db      	lsrs	r3, r3, #3
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	4a2d      	ldr	r2, [pc, #180]	; (8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e6:	e01e      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80033e8:	4b29      	ldr	r3, [pc, #164]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f4:	d106      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033fc:	d102      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80033fe:	4b26      	ldr	r3, [pc, #152]	; (8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003402:	e010      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003404:	4b22      	ldr	r3, [pc, #136]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003410:	d106      	bne.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003418:	d102      	bne.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341e:	e002      	b.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003424:	e393      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003426:	e392      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800342c:	e38f      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003432:	e38c      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343a:	f040 80a7 	bne.w	800358c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003446:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800344e:	d05f      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003456:	f200 8096 	bhi.w	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003460:	f000 808e 	beq.w	8003580 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800346a:	f200 808c 	bhi.w	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003474:	d03a      	beq.n	80034ec <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347c:	f200 8083 	bhi.w	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00e      	beq.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800348c:	d01c      	beq.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800348e:	e07a      	b.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8003490:	58024400 	.word	0x58024400
 8003494:	03d09000 	.word	0x03d09000
 8003498:	003d0900 	.word	0x003d0900
 800349c:	016e3600 	.word	0x016e3600
 80034a0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80034a4:	4baa      	ldr	r3, [pc, #680]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034b0:	d107      	bne.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80034b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fe14 	bl	80040e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80034c0:	e345      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034c6:	e342      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80034c8:	4ba1      	ldr	r3, [pc, #644]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d4:	d107      	bne.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80034d6:	f107 0318 	add.w	r3, r7, #24
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fb5a 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80034e4:	e333      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80034ea:	e330      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80034ec:	4b98      	ldr	r3, [pc, #608]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f8:	d107      	bne.n	800350a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80034fa:	f107 030c 	add.w	r3, r7, #12
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fc9c 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003508:	e321      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800350e:	e31e      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003510:	4b8f      	ldr	r3, [pc, #572]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003518:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800351a:	4b8d      	ldr	r3, [pc, #564]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800352c:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	4a87      	ldr	r2, [pc, #540]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800353e:	e01e      	b.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003540:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354c:	d106      	bne.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003554:	d102      	bne.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003556:	4b80      	ldr	r3, [pc, #512]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800355a:	e010      	b.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800355c:	4b7c      	ldr	r3, [pc, #496]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003568:	d106      	bne.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003570:	d102      	bne.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003572:	4b7a      	ldr	r3, [pc, #488]	; (800375c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003576:	e002      	b.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800357c:	e2e7      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800357e:	e2e6      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003580:	4b77      	ldr	r3, [pc, #476]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003584:	e2e3      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800358a:	e2e0      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003592:	f040 809c 	bne.w	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8003596:	4b6e      	ldr	r3, [pc, #440]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800359e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a6:	d054      	beq.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ae:	f200 808b 	bhi.w	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035b8:	f000 8083 	beq.w	80036c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035c2:	f200 8081 	bhi.w	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035cc:	d02f      	beq.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035d4:	d878      	bhi.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e2:	d012      	beq.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80035e4:	e070      	b.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80035e6:	4b5a      	ldr	r3, [pc, #360]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f2:	d107      	bne.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80035f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fd73 	bl	80040e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003602:	e2a4      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003608:	e2a1      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003616:	d107      	bne.n	8003628 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003618:	f107 0318 	add.w	r3, r7, #24
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fab9 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8003626:	e292      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800362c:	e28f      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800362e:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800363a:	d107      	bne.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fbfb 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800364a:	e280      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003650:	e27d      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003652:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800365a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800365c:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d10c      	bne.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	4a36      	ldr	r2, [pc, #216]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003680:	e01e      	b.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003682:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368e:	d106      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003696:	d102      	bne.n	800369e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003698:	4b2f      	ldr	r3, [pc, #188]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	e010      	b.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800369e:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036aa:	d106      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b2:	d102      	bne.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80036b4:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b8:	e002      	b.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80036be:	e246      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80036c0:	e245      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80036c2:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036c6:	e242      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036cc:	e23f      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	f040 80a8 	bne.w	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80036e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036e8:	d060      	beq.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f0:	f200 8097 	bhi.w	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036fa:	f000 808f 	beq.w	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003704:	f200 808d 	bhi.w	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370e:	d03b      	beq.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	f200 8084 	bhi.w	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d01d      	beq.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8003728:	e07b      	b.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003736:	d107      	bne.n	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fcd1 	bl	80040e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003746:	e202      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800374c:	e1ff      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800374e:	bf00      	nop
 8003750:	58024400 	.word	0x58024400
 8003754:	03d09000 	.word	0x03d09000
 8003758:	003d0900 	.word	0x003d0900
 800375c:	016e3600 	.word	0x016e3600
 8003760:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003764:	4ba3      	ldr	r3, [pc, #652]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003770:	d107      	bne.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003772:	f107 0318 	add.w	r3, r7, #24
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fa0c 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003780:	e1e5      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003786:	e1e2      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003788:	4b9a      	ldr	r3, [pc, #616]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003794:	d107      	bne.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003796:	f107 030c 	add.w	r3, r7, #12
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fb4e 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80037a4:	e1d3      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037aa:	e1d0      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80037ac:	4b91      	ldr	r3, [pc, #580]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80037ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80037b6:	4b8f      	ldr	r3, [pc, #572]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d10c      	bne.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80037c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037c8:	4b8a      	ldr	r3, [pc, #552]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	08db      	lsrs	r3, r3, #3
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	4a89      	ldr	r2, [pc, #548]	; (80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037da:	e01e      	b.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80037dc:	4b85      	ldr	r3, [pc, #532]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e8:	d106      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80037ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f0:	d102      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80037f2:	4b82      	ldr	r3, [pc, #520]	; (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f6:	e010      	b.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80037f8:	4b7e      	ldr	r3, [pc, #504]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003804:	d106      	bne.n	8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d102      	bne.n	8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800380e:	4b7c      	ldr	r3, [pc, #496]	; (8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003812:	e002      	b.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003818:	e199      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800381a:	e198      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800381c:	4b79      	ldr	r3, [pc, #484]	; (8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800381e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003820:	e195      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003826:	e192      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800382e:	d173      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003830:	4b70      	ldr	r3, [pc, #448]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003838:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003840:	d02f      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003848:	d863      	bhi.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003856:	d012      	beq.n	800387e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8003858:	e05b      	b.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800385a:	4b66      	ldr	r3, [pc, #408]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003866:	d107      	bne.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003868:	f107 0318 	add.w	r3, r7, #24
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f991 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003876:	e16a      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800387c:	e167      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800387e:	4b5d      	ldr	r3, [pc, #372]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388a:	d107      	bne.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fad3 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800389a:	e158      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038a0:	e155      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80038ac:	4b51      	ldr	r3, [pc, #324]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d10c      	bne.n	80038d2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038be:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	08db      	lsrs	r3, r3, #3
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d0:	e01e      	b.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038d2:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038de:	d106      	bne.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e6:	d102      	bne.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80038e8:	4b44      	ldr	r3, [pc, #272]	; (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ec:	e010      	b.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038fa:	d106      	bne.n	800390a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003902:	d102      	bne.n	800390a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003904:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003908:	e002      	b.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800390e:	e11e      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003910:	e11d      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003916:	e11a      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d133      	bne.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003928:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003936:	d012      	beq.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8003938:	e023      	b.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003946:	d107      	bne.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fbc9 	bl	80040e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003956:	e0fa      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800395c:	e0f7      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800395e:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396a:	d107      	bne.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800396c:	f107 0318 	add.w	r3, r7, #24
 8003970:	4618      	mov	r0, r3
 8003972:	f000 f90f 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800397a:	e0e8      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003980:	e0e5      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003986:	e0e2      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398e:	f040 808f 	bne.w	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a2:	d075      	beq.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039aa:	d87e      	bhi.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80039ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d060      	beq.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ba:	d876      	bhi.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039c2:	d045      	beq.n	8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039ca:	d86e      	bhi.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d2:	d02b      	beq.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039da:	d866      	bhi.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e8:	d00e      	beq.n	8003a08 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80039ea:	e05e      	b.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80039ec:	f000 f8bc 	bl	8003b68 <HAL_RCCEx_GetD3PCLK1Freq>
 80039f0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80039f2:	e0ac      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80039f4:	58024400 	.word	0x58024400
 80039f8:	03d09000 	.word	0x03d09000
 80039fc:	003d0900 	.word	0x003d0900
 8003a00:	016e3600 	.word	0x016e3600
 8003a04:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003a08:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a14:	d107      	bne.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a16:	f107 0318 	add.w	r3, r7, #24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f8ba 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003a24:	e093      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a2a:	e090      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a2c:	4b4a      	ldr	r3, [pc, #296]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a38:	d107      	bne.n	8003a4a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f9fc 	bl	8003e3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003a48:	e081      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a4e:	e07e      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a50:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a5c:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	4a3d      	ldr	r2, [pc, #244]	; (8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003a6e:	e06e      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a74:	e06b      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003a76:	4b38      	ldr	r3, [pc, #224]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a82:	d102      	bne.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8003a84:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a88:	e061      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a8e:	e05e      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a9c:	d102      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003aa2:	e054      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aa8:	e051      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003aae:	e04e      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab6:	d148      	bne.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac8:	d02a      	beq.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad0:	d838      	bhi.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ade:	d00d      	beq.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8003ae0:	e030      	b.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aee:	d102      	bne.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003af2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003af4:	e02b      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003afa:	e028      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b08:	d107      	bne.n	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fae8 	bl	80040e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003b18:	e019      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b1e:	e016      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b20:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b2e:	f107 0318 	add.w	r3, r7, #24
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f82e 	bl	8003b94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003b3c:	e007      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b42:	e004      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b48:	e001      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3740      	adds	r7, #64	; 0x40
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	03d09000 	.word	0x03d09000
 8003b60:	003d0900 	.word	0x003d0900
 8003b64:	016e3600 	.word	0x016e3600

08003b68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b6c:	f7fe fb9e 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	08005210 	.word	0x08005210

08003b94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	; 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b9c:	4ba1      	ldr	r3, [pc, #644]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003ba6:	4b9f      	ldr	r3, [pc, #636]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	0b1b      	lsrs	r3, r3, #12
 8003bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003bb2:	4b9c      	ldr	r3, [pc, #624]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003bbe:	4b99      	ldr	r3, [pc, #612]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8111 	beq.w	8003e04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	f000 8083 	beq.w	8003cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	f200 80a1 	bhi.w	8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d056      	beq.n	8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003bfe:	e099      	b.n	8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c00:	4b88      	ldr	r3, [pc, #544]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d02d      	beq.n	8003c68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c0c:	4b85      	ldr	r3, [pc, #532]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	4a84      	ldr	r2, [pc, #528]	; (8003e28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	ee07 3a90 	vmov	s15, r3
 8003c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c36:	4b7b      	ldr	r3, [pc, #492]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003c66:	e087      	b.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003caa:	e065      	b.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cbe:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cee:	e043      	b.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d02:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d32:	e021      	b.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d46:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003d78:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	0a5b      	lsrs	r3, r3, #9
 8003d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9e:	ee17 2a90 	vmov	r2, s15
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003da6:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dcc:	ee17 2a90 	vmov	r2, s15
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	0e1b      	lsrs	r3, r3, #24
 8003dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dfa:	ee17 2a90 	vmov	r2, s15
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e02:	e008      	b.n	8003e16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
}
 8003e16:	bf00      	nop
 8003e18:	3724      	adds	r7, #36	; 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	58024400 	.word	0x58024400
 8003e28:	03d09000 	.word	0x03d09000
 8003e2c:	46000000 	.word	0x46000000
 8003e30:	4c742400 	.word	0x4c742400
 8003e34:	4a742400 	.word	0x4a742400
 8003e38:	4bb71b00 	.word	0x4bb71b00

08003e3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e44:	4ba1      	ldr	r3, [pc, #644]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003e4e:	4b9f      	ldr	r3, [pc, #636]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	0d1b      	lsrs	r3, r3, #20
 8003e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e5a:	4b9c      	ldr	r3, [pc, #624]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003e66:	4b99      	ldr	r3, [pc, #612]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	08db      	lsrs	r3, r3, #3
 8003e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8111 	beq.w	80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	f000 8083 	beq.w	8003f98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	f200 80a1 	bhi.w	8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d056      	beq.n	8003f54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ea6:	e099      	b.n	8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea8:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02d      	beq.n	8003f10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003eb4:	4b85      	ldr	r3, [pc, #532]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	4a84      	ldr	r2, [pc, #528]	; (80040d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ede:	4b7b      	ldr	r3, [pc, #492]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ef2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f0e:	e087      	b.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f22:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f36:	eddf 5a67 	vldr	s11, [pc, #412]	; 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f52:	e065      	b.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f66:	4b59      	ldr	r3, [pc, #356]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f96:	e043      	b.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b48      	ldr	r3, [pc, #288]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fda:	e021      	b.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80040dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b37      	ldr	r3, [pc, #220]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004002:	eddf 5a34 	vldr	s11, [pc, #208]	; 80040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800401e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	0a5b      	lsrs	r3, r3, #9
 8004026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800403a:	edd7 6a07 	vldr	s13, [r7, #28]
 800403e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004046:	ee17 2a90 	vmov	r2, s15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004064:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004068:	edd7 6a07 	vldr	s13, [r7, #28]
 800406c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004074:	ee17 2a90 	vmov	r2, s15
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800407c:	4b13      	ldr	r3, [pc, #76]	; (80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	0e1b      	lsrs	r3, r3, #24
 8004082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004096:	edd7 6a07 	vldr	s13, [r7, #28]
 800409a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800409e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a2:	ee17 2a90 	vmov	r2, s15
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040aa:	e008      	b.n	80040be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
}
 80040be:	bf00      	nop
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	58024400 	.word	0x58024400
 80040d0:	03d09000 	.word	0x03d09000
 80040d4:	46000000 	.word	0x46000000
 80040d8:	4c742400 	.word	0x4c742400
 80040dc:	4a742400 	.word	0x4a742400
 80040e0:	4bb71b00 	.word	0x4bb71b00

080040e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b089      	sub	sp, #36	; 0x24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040ec:	4ba0      	ldr	r3, [pc, #640]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80040f6:	4b9e      	ldr	r3, [pc, #632]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004100:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004102:	4b9b      	ldr	r3, [pc, #620]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800410c:	4b98      	ldr	r3, [pc, #608]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004124:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8111 	beq.w	8004352 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b02      	cmp	r3, #2
 8004134:	f000 8083 	beq.w	800423e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b02      	cmp	r3, #2
 800413c:	f200 80a1 	bhi.w	8004282 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d056      	beq.n	80041fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800414c:	e099      	b.n	8004282 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800414e:	4b88      	ldr	r3, [pc, #544]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d02d      	beq.n	80041b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800415a:	4b85      	ldr	r3, [pc, #532]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	08db      	lsrs	r3, r3, #3
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	4a83      	ldr	r2, [pc, #524]	; (8004374 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8004166:	fa22 f303 	lsr.w	r3, r2, r3
 800416a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004184:	4b7a      	ldr	r3, [pc, #488]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004194:	ed97 6a03 	vldr	s12, [r7, #12]
 8004198:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800419c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80041b4:	e087      	b.n	80042c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	ee07 3a90 	vmov	s15, r3
 80041bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800437c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80041c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c8:	4b69      	ldr	r3, [pc, #420]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80041dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80041e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041f8:	e065      	b.n	80042c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004204:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004380 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800420c:	4b58      	ldr	r3, [pc, #352]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004220:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004238:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800423c:	e043      	b.n	80042c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004248:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004384 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800424c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004250:	4b47      	ldr	r3, [pc, #284]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004260:	ed97 6a03 	vldr	s12, [r7, #12]
 8004264:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800426c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004280:	e021      	b.n	80042c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	ee07 3a90 	vmov	s15, r3
 8004288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800437c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429c:	ee07 3a90 	vmov	s15, r3
 80042a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80042a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004378 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80042ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80042c6:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	0a5b      	lsrs	r3, r3, #9
 80042cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d0:	ee07 3a90 	vmov	s15, r3
 80042d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80042e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ec:	ee17 2a90 	vmov	r2, s15
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800430a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800430e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800431a:	ee17 2a90 	vmov	r2, s15
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	0e1b      	lsrs	r3, r3, #24
 8004328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800433c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004348:	ee17 2a90 	vmov	r2, s15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	3724      	adds	r7, #36	; 0x24
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	58024400 	.word	0x58024400
 8004374:	03d09000 	.word	0x03d09000
 8004378:	46000000 	.word	0x46000000
 800437c:	4c742400 	.word	0x4c742400
 8004380:	4a742400 	.word	0x4a742400
 8004384:	4bb71b00 	.word	0x4bb71b00

08004388 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004396:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d101      	bne.n	80043a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e099      	b.n	80044da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043a6:	4b4f      	ldr	r3, [pc, #316]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a4e      	ldr	r2, [pc, #312]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80043ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b2:	f7fc fd29 	bl	8000e08 <HAL_GetTick>
 80043b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043b8:	e008      	b.n	80043cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043ba:	f7fc fd25 	bl	8000e08 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e086      	b.n	80044da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043cc:	4b45      	ldr	r3, [pc, #276]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f0      	bne.n	80043ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043d8:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	493f      	ldr	r1, [pc, #252]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	628b      	str	r3, [r1, #40]	; 0x28
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	b29b      	uxth	r3, r3
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	3b01      	subs	r3, #1
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	3b01      	subs	r3, #1
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800441c:	4931      	ldr	r1, [pc, #196]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	492d      	ldr	r1, [pc, #180]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004430:	4313      	orrs	r3, r2
 8004432:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	f023 0220 	bic.w	r2, r3, #32
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4928      	ldr	r1, [pc, #160]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 800444c:	f023 0310 	bic.w	r3, r3, #16
 8004450:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004456:	4b24      	ldr	r3, [pc, #144]	; (80044e8 <RCCEx_PLL2_Config+0x160>)
 8004458:	4013      	ands	r3, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	69d2      	ldr	r2, [r2, #28]
 800445e:	00d2      	lsls	r2, r2, #3
 8004460:	4920      	ldr	r1, [pc, #128]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004462:	4313      	orrs	r3, r2
 8004464:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 800446c:	f043 0310 	orr.w	r3, r3, #16
 8004470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 800447e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004482:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004484:	e00f      	b.n	80044a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d106      	bne.n	800449a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 8004492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004498:	e005      	b.n	80044a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80044a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b2:	f7fc fca9 	bl	8000e08 <HAL_GetTick>
 80044b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044b8:	e008      	b.n	80044cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044ba:	f7fc fca5 	bl	8000e08 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e006      	b.n	80044da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <RCCEx_PLL2_Config+0x15c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	58024400 	.word	0x58024400
 80044e8:	ffff0007 	.word	0xffff0007

080044ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044fa:	4b53      	ldr	r3, [pc, #332]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b03      	cmp	r3, #3
 8004504:	d101      	bne.n	800450a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e099      	b.n	800463e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800450a:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a4e      	ldr	r2, [pc, #312]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004516:	f7fc fc77 	bl	8000e08 <HAL_GetTick>
 800451a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800451c:	e008      	b.n	8004530 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800451e:	f7fc fc73 	bl	8000e08 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e086      	b.n	800463e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004530:	4b45      	ldr	r3, [pc, #276]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f0      	bne.n	800451e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800453c:	4b42      	ldr	r3, [pc, #264]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	051b      	lsls	r3, r3, #20
 800454a:	493f      	ldr	r1, [pc, #252]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	628b      	str	r3, [r1, #40]	; 0x28
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	3b01      	subs	r3, #1
 8004556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	025b      	lsls	r3, r3, #9
 8004562:	b29b      	uxth	r3, r3
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	3b01      	subs	r3, #1
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	3b01      	subs	r3, #1
 800457a:	061b      	lsls	r3, r3, #24
 800457c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004580:	4931      	ldr	r1, [pc, #196]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004586:	4b30      	ldr	r3, [pc, #192]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	492d      	ldr	r1, [pc, #180]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	4928      	ldr	r1, [pc, #160]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045aa:	4b27      	ldr	r3, [pc, #156]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	4a26      	ldr	r2, [pc, #152]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <RCCEx_PLL3_Config+0x160>)
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	69d2      	ldr	r2, [r2, #28]
 80045c2:	00d2      	lsls	r2, r2, #3
 80045c4:	4920      	ldr	r1, [pc, #128]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045ca:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4a19      	ldr	r2, [pc, #100]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045e8:	e00f      	b.n	800460a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d106      	bne.n	80045fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045f0:	4b15      	ldr	r3, [pc, #84]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 80045f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045fc:	e005      	b.n	800460a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045fe:	4b12      	ldr	r3, [pc, #72]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	4a11      	ldr	r2, [pc, #68]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004604:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004608:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004616:	f7fc fbf7 	bl	8000e08 <HAL_GetTick>
 800461a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800461c:	e008      	b.n	8004630 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800461e:	f7fc fbf3 	bl	8000e08 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e006      	b.n	800463e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <RCCEx_PLL3_Config+0x15c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	58024400 	.word	0x58024400
 800464c:	ffff0007 	.word	0xffff0007

08004650 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d904      	bls.n	800466e <HAL_SAI_InitProtocol+0x1e>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	3b03      	subs	r3, #3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d812      	bhi.n	8004692 <HAL_SAI_InitProtocol+0x42>
 800466c:	e008      	b.n	8004680 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fabd 	bl	8004bf4 <SAI_InitI2S>
 800467a:	4603      	mov	r3, r0
 800467c:	75fb      	strb	r3, [r7, #23]
      break;
 800467e:	e00b      	b.n	8004698 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fb66 	bl	8004d58 <SAI_InitPCM>
 800468c:	4603      	mov	r3, r0
 800468e:	75fb      	strb	r3, [r7, #23]
      break;
 8004690:	e002      	b.n	8004698 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	75fb      	strb	r3, [r7, #23]
      break;
 8004696:	bf00      	nop
  }

  if (status == HAL_OK)
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f808 	bl	80046b4 <HAL_SAI_Init>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	; 0x28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e283      	b.n	8004bce <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80046c6:	f7fc fbab 	bl	8000e20 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d113      	bne.n	80046fc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a94      	ldr	r2, [pc, #592]	; (800492c <HAL_SAI_Init+0x278>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_SAI_Init+0x34>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a93      	ldr	r2, [pc, #588]	; (8004930 <HAL_SAI_Init+0x27c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d107      	bne.n	80046f8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d103      	bne.n	80046f8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e268      	b.n	8004bce <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a8a      	ldr	r2, [pc, #552]	; (800492c <HAL_SAI_Init+0x278>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_SAI_Init+0x5c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a8a      	ldr	r2, [pc, #552]	; (8004934 <HAL_SAI_Init+0x280>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d102      	bne.n	8004716 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8004710:	4b89      	ldr	r3, [pc, #548]	; (8004938 <HAL_SAI_Init+0x284>)
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	e028      	b.n	8004768 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a88      	ldr	r2, [pc, #544]	; (800493c <HAL_SAI_Init+0x288>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_SAI_Init+0x76>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a86      	ldr	r2, [pc, #536]	; (8004940 <HAL_SAI_Init+0x28c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d102      	bne.n	8004730 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800472a:	4b86      	ldr	r3, [pc, #536]	; (8004944 <HAL_SAI_Init+0x290>)
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e01b      	b.n	8004768 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a84      	ldr	r2, [pc, #528]	; (8004948 <HAL_SAI_Init+0x294>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_SAI_Init+0x90>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a83      	ldr	r2, [pc, #524]	; (800494c <HAL_SAI_Init+0x298>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d102      	bne.n	800474a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8004744:	4b82      	ldr	r3, [pc, #520]	; (8004950 <HAL_SAI_Init+0x29c>)
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e00e      	b.n	8004768 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a78      	ldr	r2, [pc, #480]	; (8004930 <HAL_SAI_Init+0x27c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_SAI_Init+0xaa>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a7e      	ldr	r2, [pc, #504]	; (8004954 <HAL_SAI_Init+0x2a0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d102      	bne.n	8004764 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800475e:	4b7e      	ldr	r3, [pc, #504]	; (8004958 <HAL_SAI_Init+0x2a4>)
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	e001      	b.n	8004768 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e232      	b.n	8004bce <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fc f8b5 	bl	80008ec <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fb6a 	bl	8004e5c <SAI_Disable>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e21d      	b.n	8004bce <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d00c      	beq.n	80047bc <HAL_SAI_Init+0x108>
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d80d      	bhi.n	80047c2 <HAL_SAI_Init+0x10e>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_SAI_Init+0xfc>
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d003      	beq.n	80047b6 <HAL_SAI_Init+0x102>
 80047ae:	e008      	b.n	80047c2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80047b4:	e008      	b.n	80047c8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80047b6:	2310      	movs	r3, #16
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80047ba:	e005      	b.n	80047c8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80047bc:	2320      	movs	r3, #32
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80047c0:	e002      	b.n	80047c8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80047c6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b05      	cmp	r3, #5
 80047ce:	d832      	bhi.n	8004836 <HAL_SAI_Init+0x182>
 80047d0:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <HAL_SAI_Init+0x124>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	080047f1 	.word	0x080047f1
 80047dc:	080047f7 	.word	0x080047f7
 80047e0:	080047ff 	.word	0x080047ff
 80047e4:	08004807 	.word	0x08004807
 80047e8:	08004817 	.word	0x08004817
 80047ec:	08004827 	.word	0x08004827
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
      break;
 80047f4:	e022      	b.n	800483c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80047f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047fa:	61fb      	str	r3, [r7, #28]
      break;
 80047fc:	e01e      	b.n	800483c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80047fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004802:	61fb      	str	r3, [r7, #28]
      break;
 8004804:	e01a      	b.n	800483c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004806:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800480a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004814:	e012      	b.n	800483c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800481a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f043 0302 	orr.w	r3, r3, #2
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004824:	e00a      	b.n	800483c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800482a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	f043 0303 	orr.w	r3, r3, #3
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004834:	e002      	b.n	800483c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
      break;
 800483a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80ba 	beq.w	80049c0 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a35      	ldr	r2, [pc, #212]	; (800492c <HAL_SAI_Init+0x278>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_SAI_Init+0x1b0>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a35      	ldr	r2, [pc, #212]	; (8004934 <HAL_SAI_Init+0x280>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d104      	bne.n	800486e <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004864:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004868:	f7fe fcac 	bl	80031c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800486c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a32      	ldr	r2, [pc, #200]	; (800493c <HAL_SAI_Init+0x288>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_SAI_Init+0x1ce>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a30      	ldr	r2, [pc, #192]	; (8004940 <HAL_SAI_Init+0x28c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d104      	bne.n	800488c <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004882:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004886:	f7fe fc9d 	bl	80031c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800488a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <HAL_SAI_Init+0x294>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_SAI_Init+0x1ec>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2c      	ldr	r2, [pc, #176]	; (800494c <HAL_SAI_Init+0x298>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d104      	bne.n	80048aa <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80048a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80048a4:	f7fe fc8e 	bl	80031c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80048a8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_SAI_Init+0x27c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d104      	bne.n	80048be <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80048b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80048b8:	f7fe fc84 	bl	80031c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80048bc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a24      	ldr	r2, [pc, #144]	; (8004954 <HAL_SAI_Init+0x2a0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d104      	bne.n	80048d2 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80048c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048cc:	f7fe fc7a 	bl	80031c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80048d0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80048da:	d120      	bne.n	800491e <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d102      	bne.n	80048ea <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80048e4:	2340      	movs	r3, #64	; 0x40
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e00a      	b.n	8004900 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d103      	bne.n	80048fa <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80048f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e002      	b.n	8004900 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4619      	mov	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	fbb1 f3f3 	udiv	r3, r1, r3
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e02f      	b.n	800497e <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004926:	d119      	bne.n	800495c <HAL_SAI_Init+0x2a8>
 8004928:	2302      	movs	r3, #2
 800492a:	e018      	b.n	800495e <HAL_SAI_Init+0x2aa>
 800492c:	40015804 	.word	0x40015804
 8004930:	58005404 	.word	0x58005404
 8004934:	40015824 	.word	0x40015824
 8004938:	40015800 	.word	0x40015800
 800493c:	40015c04 	.word	0x40015c04
 8004940:	40015c24 	.word	0x40015c24
 8004944:	40015c00 	.word	0x40015c00
 8004948:	40016004 	.word	0x40016004
 800494c:	40016024 	.word	0x40016024
 8004950:	40016000 	.word	0x40016000
 8004954:	58005424 	.word	0x58005424
 8004958:	58005400 	.word	0x58005400
 800495c:	2301      	movs	r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4619      	mov	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	fbb1 f3f3 	udiv	r3, r1, r3
 800497c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a95      	ldr	r2, [pc, #596]	; (8004bd8 <HAL_SAI_Init+0x524>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800498c:	6939      	ldr	r1, [r7, #16]
 800498e:	4b92      	ldr	r3, [pc, #584]	; (8004bd8 <HAL_SAI_Init+0x524>)
 8004990:	fba3 2301 	umull	r2, r3, r3, r1
 8004994:	08da      	lsrs	r2, r3, #3
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	1aca      	subs	r2, r1, r3
 80049a0:	2a08      	cmp	r2, #8
 80049a2:	d904      	bls.n	80049ae <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d104      	bne.n	80049c0 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	085a      	lsrs	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_SAI_Init+0x31c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d109      	bne.n	80049e4 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_SAI_Init+0x328>
 80049d8:	2300      	movs	r3, #0
 80049da:	e001      	b.n	80049e0 <HAL_SAI_Init+0x32c>
 80049dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	e008      	b.n	80049f6 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <HAL_SAI_Init+0x33e>
 80049ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049f0:	e000      	b.n	80049f4 <HAL_SAI_Init+0x340>
 80049f2:	2300      	movs	r3, #0
 80049f4:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80049f6:	f7fc fa13 	bl	8000e20 <HAL_GetREVID>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a00:	d331      	bcc.n	8004a66 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6819      	ldr	r1, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b73      	ldr	r3, [pc, #460]	; (8004bdc <HAL_SAI_Init+0x528>)
 8004a0e:	400b      	ands	r3, r1
 8004a10:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6819      	ldr	r1, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a26:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8004a3a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a46:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	051b      	lsls	r3, r3, #20
 8004a4e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004a54:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e02d      	b.n	8004ac2 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6819      	ldr	r1, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_SAI_Init+0x52c>)
 8004a72:	400b      	ands	r3, r1
 8004a74:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a8a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a90:	431a      	orrs	r2, r3
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8004a9e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004aaa:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	051b      	lsls	r3, r3, #20
 8004ab2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004ab8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <HAL_SAI_Init+0x530>)
 8004ace:	400b      	ands	r3, r1
 8004ad0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6899      	ldr	r1, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <HAL_SAI_Init+0x534>)
 8004afc:	400b      	ands	r3, r1
 8004afe:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6899      	ldr	r1, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004b10:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8004b16:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8004b1c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	3b01      	subs	r3, #1
 8004b24:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004b26:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68d9      	ldr	r1, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004b3e:	400b      	ands	r3, r1
 8004b40:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68d9      	ldr	r1, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b50:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b56:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004b58:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_SAI_Init+0x538>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_SAI_Init+0x4cc>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <HAL_SAI_Init+0x53c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d119      	bne.n	8004bb4 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	f023 0201 	bic.w	r2, r3, #1
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10e      	bne.n	8004bb4 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	f043 0201 	orr.w	r2, r3, #1
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3728      	adds	r7, #40	; 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	cccccccd 	.word	0xcccccccd
 8004bdc:	f005c010 	.word	0xf005c010
 8004be0:	f805c010 	.word	0xf805c010
 8004be4:	ffff1ff0 	.word	0xffff1ff0
 8004be8:	fff88000 	.word	0xfff88000
 8004bec:	40015804 	.word	0x40015804
 8004bf0:	58005404 	.word	0x58005404

08004bf4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <SAI_InitI2S+0x2e>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d103      	bne.n	8004c2a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	651a      	str	r2, [r3, #80]	; 0x50
 8004c28:	e002      	b.n	8004c30 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c36:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c3e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e077      	b.n	8004d4a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004c6c:	665a      	str	r2, [r3, #100]	; 0x64
 8004c6e:	e006      	b.n	8004c7e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	665a      	str	r2, [r3, #100]	; 0x64
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d84f      	bhi.n	8004d24 <SAI_InitI2S+0x130>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <SAI_InitI2S+0x98>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004cbf 	.word	0x08004cbf
 8004c94:	08004ce1 	.word	0x08004ce1
 8004c98:	08004d03 	.word	0x08004d03

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2280      	movs	r2, #128	; 0x80
 8004ca0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	011a      	lsls	r2, r3, #4
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2240      	movs	r2, #64	; 0x40
 8004cba:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8004cbc:	e035      	b.n	8004d2a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2280      	movs	r2, #128	; 0x80
 8004cc2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	019a      	lsls	r2, r3, #6
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	085b      	lsrs	r3, r3, #1
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2280      	movs	r2, #128	; 0x80
 8004cdc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8004cde:	e024      	b.n	8004d2a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	22c0      	movs	r2, #192	; 0xc0
 8004ce4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	019a      	lsls	r2, r3, #6
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8004d00:	e013      	b.n	8004d2a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	22e0      	movs	r2, #224	; 0xe0
 8004d06:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	019a      	lsls	r2, r3, #6
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2280      	movs	r2, #128	; 0x80
 8004d20:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8004d22:	e002      	b.n	8004d2a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
      break;
 8004d28:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d10b      	bne.n	8004d48 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d102      	bne.n	8004d3c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2210      	movs	r2, #16
 8004d3a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d102      	bne.n	8004d48 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2208      	movs	r2, #8
 8004d46:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop

08004d58 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <SAI_InitPCM+0x2e>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d103      	bne.n	8004d8e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d8c:	e002      	b.n	8004d94 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004da8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dbc:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d103      	bne.n	8004dcc <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	659a      	str	r2, [r3, #88]	; 0x58
 8004dca:	e002      	b.n	8004dd2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	220d      	movs	r2, #13
 8004dd0:	659a      	str	r2, [r3, #88]	; 0x58
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d837      	bhi.n	8004e48 <SAI_InitPCM+0xf0>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <SAI_InitPCM+0x88>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004e07 	.word	0x08004e07
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004e33 	.word	0x08004e33
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2280      	movs	r2, #128	; 0x80
 8004df4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	011a      	lsls	r2, r3, #4
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2240      	movs	r2, #64	; 0x40
 8004e02:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8004e04:	e023      	b.n	8004e4e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2280      	movs	r2, #128	; 0x80
 8004e0a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2280      	movs	r2, #128	; 0x80
 8004e18:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8004e1a:	e018      	b.n	8004e4e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	22c0      	movs	r2, #192	; 0xc0
 8004e20:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8004e30:	e00d      	b.n	8004e4e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	22e0      	movs	r2, #224	; 0xe0
 8004e36:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2280      	movs	r2, #128	; 0x80
 8004e44:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8004e46:	e002      	b.n	8004e4e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4c:	bf00      	nop
  }

  return status;
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004e64:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <SAI_Disable+0x6c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <SAI_Disable+0x70>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	0b1b      	lsrs	r3, r3, #12
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e86:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	72fb      	strb	r3, [r7, #11]
      break;
 8004ea2:	e009      	b.n	8004eb8 <SAI_Disable+0x5c>
    }
    count--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e7      	bne.n	8004e88 <SAI_Disable+0x2c>

  return status;
 8004eb8:	7afb      	ldrb	r3, [r7, #11]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	24000000 	.word	0x24000000
 8004ecc:	95cbec1b 	.word	0x95cbec1b

08004ed0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e03e      	b.n	8004f64 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7fb fcec 	bl	80008d8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3308      	adds	r3, #8
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f000 f830 	bl	8004f70 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	f000 f8b8 	bl	8005090 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6858      	ldr	r0, [r3, #4]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	f000 f8ff 	bl	8005130 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	6892      	ldr	r2, [r2, #8]
 8004f3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	6892      	ldr	r2, [r2, #8]
 8004f46:	f041 0101 	orr.w	r1, r1, #1
 8004f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <HAL_SRAM_Init+0x9c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a06      	ldr	r2, [pc, #24]	; (8004f6c <HAL_SRAM_Init+0x9c>)
 8004f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f58:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	52004000 	.word	0x52004000

08004f70 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	f023 0101 	bic.w	r1, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d102      	bne.n	8004fa0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e001      	b.n	8004fa4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004fb0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004fb6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004fbc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004fc2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8004fc8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8004fce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8004fd4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8004fda:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8004fe0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8005008:	4b20      	ldr	r3, [pc, #128]	; (800508c <FMC_NORSRAM_Init+0x11c>)
 800500a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005012:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800501a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005022:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	43db      	mvns	r3, r3
 8005032:	ea02 0103 	and.w	r1, r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4319      	orrs	r1, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504c:	d10c      	bne.n	8005068 <FMC_NORSRAM_Init+0xf8>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d008      	beq.n	8005068 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d006      	beq.n	800507e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	0008fb7f 	.word	0x0008fb7f

08005090 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	431a      	orrs	r2, r3
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	041b      	lsls	r3, r3, #16
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	051b      	lsls	r3, r3, #20
 80050ce:	431a      	orrs	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	3b02      	subs	r3, #2
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	431a      	orrs	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	3201      	adds	r2, #1
 80050e4:	4319      	orrs	r1, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f8:	d113      	bne.n	8005122 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005102:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	3b01      	subs	r3, #1
 800510a:	051b      	lsls	r3, r3, #20
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	431a      	orrs	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005144:	d11d      	bne.n	8005182 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005150:	4013      	ands	r3, r2
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	6852      	ldr	r2, [r2, #4]
 800515a:	0112      	lsls	r2, r2, #4
 800515c:	4311      	orrs	r1, r2
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	6892      	ldr	r2, [r2, #8]
 8005162:	0212      	lsls	r2, r2, #8
 8005164:	4311      	orrs	r1, r2
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	6992      	ldr	r2, [r2, #24]
 800516a:	4311      	orrs	r1, r2
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	68d2      	ldr	r2, [r2, #12]
 8005170:	0412      	lsls	r2, r2, #16
 8005172:	430a      	orrs	r2, r1
 8005174:	ea43 0102 	orr.w	r1, r3, r2
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005180:	e005      	b.n	800518e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800518a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	cff00000 	.word	0xcff00000

080051a0 <__libc_init_array>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	4d0d      	ldr	r5, [pc, #52]	; (80051d8 <__libc_init_array+0x38>)
 80051a4:	4c0d      	ldr	r4, [pc, #52]	; (80051dc <__libc_init_array+0x3c>)
 80051a6:	1b64      	subs	r4, r4, r5
 80051a8:	10a4      	asrs	r4, r4, #2
 80051aa:	2600      	movs	r6, #0
 80051ac:	42a6      	cmp	r6, r4
 80051ae:	d109      	bne.n	80051c4 <__libc_init_array+0x24>
 80051b0:	4d0b      	ldr	r5, [pc, #44]	; (80051e0 <__libc_init_array+0x40>)
 80051b2:	4c0c      	ldr	r4, [pc, #48]	; (80051e4 <__libc_init_array+0x44>)
 80051b4:	f000 f820 	bl	80051f8 <_init>
 80051b8:	1b64      	subs	r4, r4, r5
 80051ba:	10a4      	asrs	r4, r4, #2
 80051bc:	2600      	movs	r6, #0
 80051be:	42a6      	cmp	r6, r4
 80051c0:	d105      	bne.n	80051ce <__libc_init_array+0x2e>
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c8:	4798      	blx	r3
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7ee      	b.n	80051ac <__libc_init_array+0xc>
 80051ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d2:	4798      	blx	r3
 80051d4:	3601      	adds	r6, #1
 80051d6:	e7f2      	b.n	80051be <__libc_init_array+0x1e>
 80051d8:	08005220 	.word	0x08005220
 80051dc:	08005220 	.word	0x08005220
 80051e0:	08005220 	.word	0x08005220
 80051e4:	08005224 	.word	0x08005224

080051e8 <memset>:
 80051e8:	4402      	add	r2, r0
 80051ea:	4603      	mov	r3, r0
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d100      	bne.n	80051f2 <memset+0xa>
 80051f0:	4770      	bx	lr
 80051f2:	f803 1b01 	strb.w	r1, [r3], #1
 80051f6:	e7f9      	b.n	80051ec <memset+0x4>

080051f8 <_init>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

08005204 <_fini>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr
